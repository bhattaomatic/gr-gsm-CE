# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_grgsm_swig', [dirname(__file__)])
        except ImportError:
            import _grgsm_swig
            return _grgsm_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_grgsm_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _grgsm_swig = swig_import_helper()
    del swig_import_helper
else:
    import _grgsm_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _grgsm_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _grgsm_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _grgsm_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _grgsm_swig.high_res_timer_epoch()
class receiver(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(osr, cell_allocation, seq_nums):
        """
        make(int osr, std::vector< int,std::allocator< int > > const & cell_allocation, std::vector< int,std::allocator< int > > const & seq_nums) -> receiver_sptr

        Return a shared_ptr to a new instance of gsm::receiver.

        To avoid accidental use of raw pointers, gsm::receiver's constructor is in a private implementation class. gsm::receiver::make is the public interface for creating new instances.

        Params: (osr, cell_allocation, seq_nums)
        """
        return _grgsm_swig.receiver_make(osr, cell_allocation, seq_nums)

    make = staticmethod(make)

    def set_cell_allocation(self, cell_allocation):
        """
        set_cell_allocation(receiver self, std::vector< int,std::allocator< int > > const & cell_allocation)



        Params: (cell_allocation)
        """
        return _grgsm_swig.receiver_set_cell_allocation(self, cell_allocation)


    def set_tseq_nums(self, tseq_nums):
        """
        set_tseq_nums(receiver self, std::vector< int,std::allocator< int > > const & tseq_nums)



        Params: (tseq_nums)
        """
        return _grgsm_swig.receiver_set_tseq_nums(self, tseq_nums)


    def reset(self):
        """
        reset(receiver self)



        Params: (NONE)
        """
        return _grgsm_swig.receiver_reset(self)

    __swig_destroy__ = _grgsm_swig.delete_receiver
    __del__ = lambda self: None
receiver_swigregister = _grgsm_swig.receiver_swigregister
receiver_swigregister(receiver)

def receiver_make(osr, cell_allocation, seq_nums):
    """
    receiver_make(int osr, std::vector< int,std::allocator< int > > const & cell_allocation, std::vector< int,std::allocator< int > > const & seq_nums) -> receiver_sptr

    Return a shared_ptr to a new instance of gsm::receiver.

    To avoid accidental use of raw pointers, gsm::receiver's constructor is in a private implementation class. gsm::receiver::make is the public interface for creating new instances.

    Params: (osr, cell_allocation, seq_nums)
    """
    return _grgsm_swig.receiver_make(osr, cell_allocation, seq_nums)

class receiver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::receiver)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::receiver)> self) -> receiver_sptr
        __init__(boost::shared_ptr<(gr::gsm::receiver)> self, receiver p) -> receiver_sptr
        """
        this = _grgsm_swig.new_receiver_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(receiver_sptr self) -> receiver"""
        return _grgsm_swig.receiver_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_receiver_sptr
    __del__ = lambda self: None

    def make(self, osr, cell_allocation, seq_nums):
        """
        make(receiver_sptr self, int osr, std::vector< int,std::allocator< int > > const & cell_allocation, std::vector< int,std::allocator< int > > const & seq_nums) -> receiver_sptr

        Return a shared_ptr to a new instance of gsm::receiver.

        To avoid accidental use of raw pointers, gsm::receiver's constructor is in a private implementation class. gsm::receiver::make is the public interface for creating new instances.

        Params: (osr, cell_allocation, seq_nums)
        """
        return _grgsm_swig.receiver_sptr_make(self, osr, cell_allocation, seq_nums)


    def set_cell_allocation(self, cell_allocation):
        """
        set_cell_allocation(receiver_sptr self, std::vector< int,std::allocator< int > > const & cell_allocation)



        Params: (cell_allocation)
        """
        return _grgsm_swig.receiver_sptr_set_cell_allocation(self, cell_allocation)


    def set_tseq_nums(self, tseq_nums):
        """
        set_tseq_nums(receiver_sptr self, std::vector< int,std::allocator< int > > const & tseq_nums)



        Params: (tseq_nums)
        """
        return _grgsm_swig.receiver_sptr_set_tseq_nums(self, tseq_nums)


    def reset(self):
        """
        reset(receiver_sptr self)



        Params: (NONE)
        """
        return _grgsm_swig.receiver_sptr_reset(self)


    def history(self):
        """history(receiver_sptr self) -> unsigned int"""
        return _grgsm_swig.receiver_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(receiver_sptr self, int which, int delay)
        declare_sample_delay(receiver_sptr self, unsigned int delay)
        """
        return _grgsm_swig.receiver_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(receiver_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.receiver_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(receiver_sptr self) -> int"""
        return _grgsm_swig.receiver_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(receiver_sptr self) -> double"""
        return _grgsm_swig.receiver_sptr_relative_rate(self)


    def start(self):
        """start(receiver_sptr self) -> bool"""
        return _grgsm_swig.receiver_sptr_start(self)


    def stop(self):
        """stop(receiver_sptr self) -> bool"""
        return _grgsm_swig.receiver_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(receiver_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.receiver_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(receiver_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.receiver_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(receiver_sptr self) -> int"""
        return _grgsm_swig.receiver_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(receiver_sptr self, int m)"""
        return _grgsm_swig.receiver_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(receiver_sptr self)"""
        return _grgsm_swig.receiver_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(receiver_sptr self) -> bool"""
        return _grgsm_swig.receiver_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(receiver_sptr self, int m)"""
        return _grgsm_swig.receiver_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(receiver_sptr self) -> int"""
        return _grgsm_swig.receiver_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(receiver_sptr self, int i) -> long"""
        return _grgsm_swig.receiver_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(receiver_sptr self, long max_output_buffer)
        set_max_output_buffer(receiver_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.receiver_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(receiver_sptr self, int i) -> long"""
        return _grgsm_swig.receiver_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(receiver_sptr self, long min_output_buffer)
        set_min_output_buffer(receiver_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.receiver_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(receiver_sptr self, int which) -> float
        pc_input_buffers_full(receiver_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.receiver_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(receiver_sptr self, int which) -> float
        pc_input_buffers_full_avg(receiver_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.receiver_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(receiver_sptr self, int which) -> float
        pc_input_buffers_full_var(receiver_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.receiver_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(receiver_sptr self, int which) -> float
        pc_output_buffers_full(receiver_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.receiver_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(receiver_sptr self, int which) -> float
        pc_output_buffers_full_avg(receiver_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.receiver_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(receiver_sptr self, int which) -> float
        pc_output_buffers_full_var(receiver_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.receiver_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(receiver_sptr self) -> float"""
        return _grgsm_swig.receiver_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(receiver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.receiver_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(receiver_sptr self)"""
        return _grgsm_swig.receiver_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(receiver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.receiver_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(receiver_sptr self) -> int"""
        return _grgsm_swig.receiver_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(receiver_sptr self) -> int"""
        return _grgsm_swig.receiver_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(receiver_sptr self, int priority) -> int"""
        return _grgsm_swig.receiver_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(receiver_sptr self) -> std::string"""
        return _grgsm_swig.receiver_sptr_name(self)


    def symbol_name(self):
        """symbol_name(receiver_sptr self) -> std::string"""
        return _grgsm_swig.receiver_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(receiver_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.receiver_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(receiver_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.receiver_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(receiver_sptr self) -> long"""
        return _grgsm_swig.receiver_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(receiver_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.receiver_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(receiver_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.receiver_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(receiver_sptr self) -> std::string"""
        return _grgsm_swig.receiver_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(receiver_sptr self, std::string name)"""
        return _grgsm_swig.receiver_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(receiver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.receiver_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(receiver_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.receiver_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(receiver_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.receiver_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(receiver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.receiver_sptr_message_subscribers(self, which_port)

receiver_sptr_swigregister = _grgsm_swig.receiver_sptr_swigregister
receiver_sptr_swigregister(receiver_sptr)


receiver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
receiver = receiver.make;

class clock_offset_control(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(fc):
        """
        make(float fc) -> clock_offset_control_sptr

        Return a shared_ptr to a new instance of gsm::clock_offset_control.

        To avoid accidental use of raw pointers, gsm::clock_offset_control's constructor is in a private implementation class. gsm::clock_offset_control::make is the public interface for creating new instances.

        Params: (fc)
        """
        return _grgsm_swig.clock_offset_control_make(fc)

    make = staticmethod(make)

    def set_fc(self, fc):
        """
        set_fc(clock_offset_control self, float fc)



        Params: (fc)
        """
        return _grgsm_swig.clock_offset_control_set_fc(self, fc)

    __swig_destroy__ = _grgsm_swig.delete_clock_offset_control
    __del__ = lambda self: None
clock_offset_control_swigregister = _grgsm_swig.clock_offset_control_swigregister
clock_offset_control_swigregister(clock_offset_control)

def clock_offset_control_make(fc):
    """
    clock_offset_control_make(float fc) -> clock_offset_control_sptr

    Return a shared_ptr to a new instance of gsm::clock_offset_control.

    To avoid accidental use of raw pointers, gsm::clock_offset_control's constructor is in a private implementation class. gsm::clock_offset_control::make is the public interface for creating new instances.

    Params: (fc)
    """
    return _grgsm_swig.clock_offset_control_make(fc)

class clock_offset_control_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::clock_offset_control)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::clock_offset_control)> self) -> clock_offset_control_sptr
        __init__(boost::shared_ptr<(gr::gsm::clock_offset_control)> self, clock_offset_control p) -> clock_offset_control_sptr
        """
        this = _grgsm_swig.new_clock_offset_control_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(clock_offset_control_sptr self) -> clock_offset_control"""
        return _grgsm_swig.clock_offset_control_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_clock_offset_control_sptr
    __del__ = lambda self: None

    def make(self, fc):
        """
        make(clock_offset_control_sptr self, float fc) -> clock_offset_control_sptr

        Return a shared_ptr to a new instance of gsm::clock_offset_control.

        To avoid accidental use of raw pointers, gsm::clock_offset_control's constructor is in a private implementation class. gsm::clock_offset_control::make is the public interface for creating new instances.

        Params: (fc)
        """
        return _grgsm_swig.clock_offset_control_sptr_make(self, fc)


    def set_fc(self, fc):
        """
        set_fc(clock_offset_control_sptr self, float fc)



        Params: (fc)
        """
        return _grgsm_swig.clock_offset_control_sptr_set_fc(self, fc)


    def history(self):
        """history(clock_offset_control_sptr self) -> unsigned int"""
        return _grgsm_swig.clock_offset_control_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(clock_offset_control_sptr self, int which, int delay)
        declare_sample_delay(clock_offset_control_sptr self, unsigned int delay)
        """
        return _grgsm_swig.clock_offset_control_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(clock_offset_control_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.clock_offset_control_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(clock_offset_control_sptr self) -> int"""
        return _grgsm_swig.clock_offset_control_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(clock_offset_control_sptr self) -> double"""
        return _grgsm_swig.clock_offset_control_sptr_relative_rate(self)


    def start(self):
        """start(clock_offset_control_sptr self) -> bool"""
        return _grgsm_swig.clock_offset_control_sptr_start(self)


    def stop(self):
        """stop(clock_offset_control_sptr self) -> bool"""
        return _grgsm_swig.clock_offset_control_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(clock_offset_control_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.clock_offset_control_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(clock_offset_control_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.clock_offset_control_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(clock_offset_control_sptr self) -> int"""
        return _grgsm_swig.clock_offset_control_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(clock_offset_control_sptr self, int m)"""
        return _grgsm_swig.clock_offset_control_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(clock_offset_control_sptr self)"""
        return _grgsm_swig.clock_offset_control_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(clock_offset_control_sptr self) -> bool"""
        return _grgsm_swig.clock_offset_control_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(clock_offset_control_sptr self, int m)"""
        return _grgsm_swig.clock_offset_control_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(clock_offset_control_sptr self) -> int"""
        return _grgsm_swig.clock_offset_control_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(clock_offset_control_sptr self, int i) -> long"""
        return _grgsm_swig.clock_offset_control_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(clock_offset_control_sptr self, long max_output_buffer)
        set_max_output_buffer(clock_offset_control_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.clock_offset_control_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(clock_offset_control_sptr self, int i) -> long"""
        return _grgsm_swig.clock_offset_control_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(clock_offset_control_sptr self, long min_output_buffer)
        set_min_output_buffer(clock_offset_control_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.clock_offset_control_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(clock_offset_control_sptr self, int which) -> float
        pc_input_buffers_full(clock_offset_control_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.clock_offset_control_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(clock_offset_control_sptr self, int which) -> float
        pc_input_buffers_full_avg(clock_offset_control_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.clock_offset_control_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(clock_offset_control_sptr self, int which) -> float
        pc_input_buffers_full_var(clock_offset_control_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.clock_offset_control_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(clock_offset_control_sptr self, int which) -> float
        pc_output_buffers_full(clock_offset_control_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.clock_offset_control_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(clock_offset_control_sptr self, int which) -> float
        pc_output_buffers_full_avg(clock_offset_control_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.clock_offset_control_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(clock_offset_control_sptr self, int which) -> float
        pc_output_buffers_full_var(clock_offset_control_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.clock_offset_control_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(clock_offset_control_sptr self) -> float"""
        return _grgsm_swig.clock_offset_control_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(clock_offset_control_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.clock_offset_control_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(clock_offset_control_sptr self)"""
        return _grgsm_swig.clock_offset_control_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(clock_offset_control_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.clock_offset_control_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(clock_offset_control_sptr self) -> int"""
        return _grgsm_swig.clock_offset_control_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(clock_offset_control_sptr self) -> int"""
        return _grgsm_swig.clock_offset_control_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(clock_offset_control_sptr self, int priority) -> int"""
        return _grgsm_swig.clock_offset_control_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(clock_offset_control_sptr self) -> std::string"""
        return _grgsm_swig.clock_offset_control_sptr_name(self)


    def symbol_name(self):
        """symbol_name(clock_offset_control_sptr self) -> std::string"""
        return _grgsm_swig.clock_offset_control_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(clock_offset_control_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.clock_offset_control_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(clock_offset_control_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.clock_offset_control_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(clock_offset_control_sptr self) -> long"""
        return _grgsm_swig.clock_offset_control_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(clock_offset_control_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.clock_offset_control_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(clock_offset_control_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.clock_offset_control_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(clock_offset_control_sptr self) -> std::string"""
        return _grgsm_swig.clock_offset_control_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(clock_offset_control_sptr self, std::string name)"""
        return _grgsm_swig.clock_offset_control_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(clock_offset_control_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.clock_offset_control_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(clock_offset_control_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.clock_offset_control_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(clock_offset_control_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.clock_offset_control_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(clock_offset_control_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.clock_offset_control_sptr_message_subscribers(self, which_port)

clock_offset_control_sptr_swigregister = _grgsm_swig.clock_offset_control_sptr_swigregister
clock_offset_control_sptr_swigregister(clock_offset_control_sptr)


clock_offset_control_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
clock_offset_control = clock_offset_control.make;

class cx_channel_hopper(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(ma, maio, hsn):
        """
        make(std::vector< int,std::allocator< int > > const & ma, int maio, int hsn) -> cx_channel_hopper_sptr

        Return a shared_ptr to a new instance of gsm::cx_channel_hopper.

        To avoid accidental use of raw pointers, gsm::cx_channel_hopper's constructor is in a private implementation class. gsm::cx_channel_hopper::make is the public interface for creating new instances.

        Params: (ma, maio, hsn)
        """
        return _grgsm_swig.cx_channel_hopper_make(ma, maio, hsn)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_cx_channel_hopper
    __del__ = lambda self: None
cx_channel_hopper_swigregister = _grgsm_swig.cx_channel_hopper_swigregister
cx_channel_hopper_swigregister(cx_channel_hopper)

def cx_channel_hopper_make(ma, maio, hsn):
    """
    cx_channel_hopper_make(std::vector< int,std::allocator< int > > const & ma, int maio, int hsn) -> cx_channel_hopper_sptr

    Return a shared_ptr to a new instance of gsm::cx_channel_hopper.

    To avoid accidental use of raw pointers, gsm::cx_channel_hopper's constructor is in a private implementation class. gsm::cx_channel_hopper::make is the public interface for creating new instances.

    Params: (ma, maio, hsn)
    """
    return _grgsm_swig.cx_channel_hopper_make(ma, maio, hsn)

class cx_channel_hopper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::cx_channel_hopper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::cx_channel_hopper)> self) -> cx_channel_hopper_sptr
        __init__(boost::shared_ptr<(gr::gsm::cx_channel_hopper)> self, cx_channel_hopper p) -> cx_channel_hopper_sptr
        """
        this = _grgsm_swig.new_cx_channel_hopper_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(cx_channel_hopper_sptr self) -> cx_channel_hopper"""
        return _grgsm_swig.cx_channel_hopper_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_cx_channel_hopper_sptr
    __del__ = lambda self: None

    def make(self, ma, maio, hsn):
        """
        make(cx_channel_hopper_sptr self, std::vector< int,std::allocator< int > > const & ma, int maio, int hsn) -> cx_channel_hopper_sptr

        Return a shared_ptr to a new instance of gsm::cx_channel_hopper.

        To avoid accidental use of raw pointers, gsm::cx_channel_hopper's constructor is in a private implementation class. gsm::cx_channel_hopper::make is the public interface for creating new instances.

        Params: (ma, maio, hsn)
        """
        return _grgsm_swig.cx_channel_hopper_sptr_make(self, ma, maio, hsn)


    def history(self):
        """history(cx_channel_hopper_sptr self) -> unsigned int"""
        return _grgsm_swig.cx_channel_hopper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cx_channel_hopper_sptr self, int which, int delay)
        declare_sample_delay(cx_channel_hopper_sptr self, unsigned int delay)
        """
        return _grgsm_swig.cx_channel_hopper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(cx_channel_hopper_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.cx_channel_hopper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(cx_channel_hopper_sptr self) -> int"""
        return _grgsm_swig.cx_channel_hopper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(cx_channel_hopper_sptr self) -> double"""
        return _grgsm_swig.cx_channel_hopper_sptr_relative_rate(self)


    def start(self):
        """start(cx_channel_hopper_sptr self) -> bool"""
        return _grgsm_swig.cx_channel_hopper_sptr_start(self)


    def stop(self):
        """stop(cx_channel_hopper_sptr self) -> bool"""
        return _grgsm_swig.cx_channel_hopper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(cx_channel_hopper_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.cx_channel_hopper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(cx_channel_hopper_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.cx_channel_hopper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(cx_channel_hopper_sptr self) -> int"""
        return _grgsm_swig.cx_channel_hopper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(cx_channel_hopper_sptr self, int m)"""
        return _grgsm_swig.cx_channel_hopper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cx_channel_hopper_sptr self)"""
        return _grgsm_swig.cx_channel_hopper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cx_channel_hopper_sptr self) -> bool"""
        return _grgsm_swig.cx_channel_hopper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(cx_channel_hopper_sptr self, int m)"""
        return _grgsm_swig.cx_channel_hopper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(cx_channel_hopper_sptr self) -> int"""
        return _grgsm_swig.cx_channel_hopper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(cx_channel_hopper_sptr self, int i) -> long"""
        return _grgsm_swig.cx_channel_hopper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cx_channel_hopper_sptr self, long max_output_buffer)
        set_max_output_buffer(cx_channel_hopper_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.cx_channel_hopper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(cx_channel_hopper_sptr self, int i) -> long"""
        return _grgsm_swig.cx_channel_hopper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cx_channel_hopper_sptr self, long min_output_buffer)
        set_min_output_buffer(cx_channel_hopper_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.cx_channel_hopper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cx_channel_hopper_sptr self, int which) -> float
        pc_input_buffers_full(cx_channel_hopper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.cx_channel_hopper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cx_channel_hopper_sptr self, int which) -> float
        pc_input_buffers_full_avg(cx_channel_hopper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.cx_channel_hopper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cx_channel_hopper_sptr self, int which) -> float
        pc_input_buffers_full_var(cx_channel_hopper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.cx_channel_hopper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cx_channel_hopper_sptr self, int which) -> float
        pc_output_buffers_full(cx_channel_hopper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.cx_channel_hopper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cx_channel_hopper_sptr self, int which) -> float
        pc_output_buffers_full_avg(cx_channel_hopper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.cx_channel_hopper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cx_channel_hopper_sptr self, int which) -> float
        pc_output_buffers_full_var(cx_channel_hopper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.cx_channel_hopper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(cx_channel_hopper_sptr self) -> float"""
        return _grgsm_swig.cx_channel_hopper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(cx_channel_hopper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.cx_channel_hopper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(cx_channel_hopper_sptr self)"""
        return _grgsm_swig.cx_channel_hopper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(cx_channel_hopper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.cx_channel_hopper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(cx_channel_hopper_sptr self) -> int"""
        return _grgsm_swig.cx_channel_hopper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(cx_channel_hopper_sptr self) -> int"""
        return _grgsm_swig.cx_channel_hopper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(cx_channel_hopper_sptr self, int priority) -> int"""
        return _grgsm_swig.cx_channel_hopper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(cx_channel_hopper_sptr self) -> std::string"""
        return _grgsm_swig.cx_channel_hopper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(cx_channel_hopper_sptr self) -> std::string"""
        return _grgsm_swig.cx_channel_hopper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(cx_channel_hopper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.cx_channel_hopper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(cx_channel_hopper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.cx_channel_hopper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(cx_channel_hopper_sptr self) -> long"""
        return _grgsm_swig.cx_channel_hopper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(cx_channel_hopper_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.cx_channel_hopper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(cx_channel_hopper_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.cx_channel_hopper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(cx_channel_hopper_sptr self) -> std::string"""
        return _grgsm_swig.cx_channel_hopper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(cx_channel_hopper_sptr self, std::string name)"""
        return _grgsm_swig.cx_channel_hopper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(cx_channel_hopper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.cx_channel_hopper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(cx_channel_hopper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.cx_channel_hopper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(cx_channel_hopper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.cx_channel_hopper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(cx_channel_hopper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.cx_channel_hopper_sptr_message_subscribers(self, which_port)

cx_channel_hopper_sptr_swigregister = _grgsm_swig.cx_channel_hopper_sptr_swigregister
cx_channel_hopper_sptr_swigregister(cx_channel_hopper_sptr)


cx_channel_hopper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cx_channel_hopper = cx_channel_hopper.make;

class control_channels_decoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> control_channels_decoder_sptr

        Return a shared_ptr to a new instance of gsm::control_channels_decoder.

        To avoid accidental use of raw pointers, gsm::control_channels_decoder's constructor is in a private implementation class. gsm::control_channels_decoder::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.control_channels_decoder_make()

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_control_channels_decoder
    __del__ = lambda self: None
control_channels_decoder_swigregister = _grgsm_swig.control_channels_decoder_swigregister
control_channels_decoder_swigregister(control_channels_decoder)

def control_channels_decoder_make():
    """
    control_channels_decoder_make() -> control_channels_decoder_sptr

    Return a shared_ptr to a new instance of gsm::control_channels_decoder.

    To avoid accidental use of raw pointers, gsm::control_channels_decoder's constructor is in a private implementation class. gsm::control_channels_decoder::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.control_channels_decoder_make()

class control_channels_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::control_channels_decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::control_channels_decoder)> self) -> control_channels_decoder_sptr
        __init__(boost::shared_ptr<(gr::gsm::control_channels_decoder)> self, control_channels_decoder p) -> control_channels_decoder_sptr
        """
        this = _grgsm_swig.new_control_channels_decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(control_channels_decoder_sptr self) -> control_channels_decoder"""
        return _grgsm_swig.control_channels_decoder_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_control_channels_decoder_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(control_channels_decoder_sptr self) -> control_channels_decoder_sptr

        Return a shared_ptr to a new instance of gsm::control_channels_decoder.

        To avoid accidental use of raw pointers, gsm::control_channels_decoder's constructor is in a private implementation class. gsm::control_channels_decoder::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.control_channels_decoder_sptr_make(self)


    def history(self):
        """history(control_channels_decoder_sptr self) -> unsigned int"""
        return _grgsm_swig.control_channels_decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(control_channels_decoder_sptr self, int which, int delay)
        declare_sample_delay(control_channels_decoder_sptr self, unsigned int delay)
        """
        return _grgsm_swig.control_channels_decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(control_channels_decoder_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.control_channels_decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(control_channels_decoder_sptr self) -> int"""
        return _grgsm_swig.control_channels_decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(control_channels_decoder_sptr self) -> double"""
        return _grgsm_swig.control_channels_decoder_sptr_relative_rate(self)


    def start(self):
        """start(control_channels_decoder_sptr self) -> bool"""
        return _grgsm_swig.control_channels_decoder_sptr_start(self)


    def stop(self):
        """stop(control_channels_decoder_sptr self) -> bool"""
        return _grgsm_swig.control_channels_decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(control_channels_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.control_channels_decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(control_channels_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.control_channels_decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(control_channels_decoder_sptr self) -> int"""
        return _grgsm_swig.control_channels_decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(control_channels_decoder_sptr self, int m)"""
        return _grgsm_swig.control_channels_decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(control_channels_decoder_sptr self)"""
        return _grgsm_swig.control_channels_decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(control_channels_decoder_sptr self) -> bool"""
        return _grgsm_swig.control_channels_decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(control_channels_decoder_sptr self, int m)"""
        return _grgsm_swig.control_channels_decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(control_channels_decoder_sptr self) -> int"""
        return _grgsm_swig.control_channels_decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(control_channels_decoder_sptr self, int i) -> long"""
        return _grgsm_swig.control_channels_decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(control_channels_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(control_channels_decoder_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.control_channels_decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(control_channels_decoder_sptr self, int i) -> long"""
        return _grgsm_swig.control_channels_decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(control_channels_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(control_channels_decoder_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.control_channels_decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(control_channels_decoder_sptr self, int which) -> float
        pc_input_buffers_full(control_channels_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.control_channels_decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(control_channels_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(control_channels_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.control_channels_decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(control_channels_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(control_channels_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.control_channels_decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(control_channels_decoder_sptr self, int which) -> float
        pc_output_buffers_full(control_channels_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.control_channels_decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(control_channels_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(control_channels_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.control_channels_decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(control_channels_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(control_channels_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.control_channels_decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(control_channels_decoder_sptr self) -> float"""
        return _grgsm_swig.control_channels_decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(control_channels_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.control_channels_decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(control_channels_decoder_sptr self)"""
        return _grgsm_swig.control_channels_decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(control_channels_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.control_channels_decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(control_channels_decoder_sptr self) -> int"""
        return _grgsm_swig.control_channels_decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(control_channels_decoder_sptr self) -> int"""
        return _grgsm_swig.control_channels_decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(control_channels_decoder_sptr self, int priority) -> int"""
        return _grgsm_swig.control_channels_decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(control_channels_decoder_sptr self) -> std::string"""
        return _grgsm_swig.control_channels_decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(control_channels_decoder_sptr self) -> std::string"""
        return _grgsm_swig.control_channels_decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(control_channels_decoder_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.control_channels_decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(control_channels_decoder_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.control_channels_decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(control_channels_decoder_sptr self) -> long"""
        return _grgsm_swig.control_channels_decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(control_channels_decoder_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.control_channels_decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(control_channels_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.control_channels_decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(control_channels_decoder_sptr self) -> std::string"""
        return _grgsm_swig.control_channels_decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(control_channels_decoder_sptr self, std::string name)"""
        return _grgsm_swig.control_channels_decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(control_channels_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.control_channels_decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(control_channels_decoder_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.control_channels_decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(control_channels_decoder_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.control_channels_decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(control_channels_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.control_channels_decoder_sptr_message_subscribers(self, which_port)

control_channels_decoder_sptr_swigregister = _grgsm_swig.control_channels_decoder_sptr_swigregister
control_channels_decoder_sptr_swigregister(control_channels_decoder_sptr)


control_channels_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
control_channels_decoder = control_channels_decoder.make;


_grgsm_swig.TCH_AFS12_2_swigconstant(_grgsm_swig)
TCH_AFS12_2 = _grgsm_swig.TCH_AFS12_2

_grgsm_swig.TCH_AFS10_2_swigconstant(_grgsm_swig)
TCH_AFS10_2 = _grgsm_swig.TCH_AFS10_2

_grgsm_swig.TCH_AFS7_95_swigconstant(_grgsm_swig)
TCH_AFS7_95 = _grgsm_swig.TCH_AFS7_95

_grgsm_swig.TCH_AFS7_4_swigconstant(_grgsm_swig)
TCH_AFS7_4 = _grgsm_swig.TCH_AFS7_4

_grgsm_swig.TCH_AFS6_7_swigconstant(_grgsm_swig)
TCH_AFS6_7 = _grgsm_swig.TCH_AFS6_7

_grgsm_swig.TCH_AFS5_9_swigconstant(_grgsm_swig)
TCH_AFS5_9 = _grgsm_swig.TCH_AFS5_9

_grgsm_swig.TCH_AFS5_15_swigconstant(_grgsm_swig)
TCH_AFS5_15 = _grgsm_swig.TCH_AFS5_15

_grgsm_swig.TCH_AFS4_75_swigconstant(_grgsm_swig)
TCH_AFS4_75 = _grgsm_swig.TCH_AFS4_75

_grgsm_swig.TCH_FS_swigconstant(_grgsm_swig)
TCH_FS = _grgsm_swig.TCH_FS

_grgsm_swig.TCH_EFR_swigconstant(_grgsm_swig)
TCH_EFR = _grgsm_swig.TCH_EFR
class tch_f_decoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mode, file, boundary_check=True):
        """
        make(gr::gsm::tch_mode mode, std::string const & file, bool boundary_check=True) -> tch_f_decoder_sptr

        Return a shared_ptr to a new instance of gsm::tch_f_decoder.

        To avoid accidental use of raw pointers, gsm::tch_f_decoder's constructor is in a private implementation class. gsm::tch_f_decoder::make is the public interface for creating new instances.

        Params: (mode, file, boundary_check)
        """
        return _grgsm_swig.tch_f_decoder_make(mode, file, boundary_check)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_tch_f_decoder
    __del__ = lambda self: None
tch_f_decoder_swigregister = _grgsm_swig.tch_f_decoder_swigregister
tch_f_decoder_swigregister(tch_f_decoder)

def tch_f_decoder_make(mode, file, boundary_check=True):
    """
    tch_f_decoder_make(gr::gsm::tch_mode mode, std::string const & file, bool boundary_check=True) -> tch_f_decoder_sptr

    Return a shared_ptr to a new instance of gsm::tch_f_decoder.

    To avoid accidental use of raw pointers, gsm::tch_f_decoder's constructor is in a private implementation class. gsm::tch_f_decoder::make is the public interface for creating new instances.

    Params: (mode, file, boundary_check)
    """
    return _grgsm_swig.tch_f_decoder_make(mode, file, boundary_check)

class tch_f_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::tch_f_decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::tch_f_decoder)> self) -> tch_f_decoder_sptr
        __init__(boost::shared_ptr<(gr::gsm::tch_f_decoder)> self, tch_f_decoder p) -> tch_f_decoder_sptr
        """
        this = _grgsm_swig.new_tch_f_decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tch_f_decoder_sptr self) -> tch_f_decoder"""
        return _grgsm_swig.tch_f_decoder_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_tch_f_decoder_sptr
    __del__ = lambda self: None

    def make(self, mode, file, boundary_check=True):
        """
        make(tch_f_decoder_sptr self, gr::gsm::tch_mode mode, std::string const & file, bool boundary_check=True) -> tch_f_decoder_sptr

        Return a shared_ptr to a new instance of gsm::tch_f_decoder.

        To avoid accidental use of raw pointers, gsm::tch_f_decoder's constructor is in a private implementation class. gsm::tch_f_decoder::make is the public interface for creating new instances.

        Params: (mode, file, boundary_check)
        """
        return _grgsm_swig.tch_f_decoder_sptr_make(self, mode, file, boundary_check)


    def history(self):
        """history(tch_f_decoder_sptr self) -> unsigned int"""
        return _grgsm_swig.tch_f_decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tch_f_decoder_sptr self, int which, int delay)
        declare_sample_delay(tch_f_decoder_sptr self, unsigned int delay)
        """
        return _grgsm_swig.tch_f_decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tch_f_decoder_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.tch_f_decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tch_f_decoder_sptr self) -> int"""
        return _grgsm_swig.tch_f_decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tch_f_decoder_sptr self) -> double"""
        return _grgsm_swig.tch_f_decoder_sptr_relative_rate(self)


    def start(self):
        """start(tch_f_decoder_sptr self) -> bool"""
        return _grgsm_swig.tch_f_decoder_sptr_start(self)


    def stop(self):
        """stop(tch_f_decoder_sptr self) -> bool"""
        return _grgsm_swig.tch_f_decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tch_f_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.tch_f_decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tch_f_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.tch_f_decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tch_f_decoder_sptr self) -> int"""
        return _grgsm_swig.tch_f_decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tch_f_decoder_sptr self, int m)"""
        return _grgsm_swig.tch_f_decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tch_f_decoder_sptr self)"""
        return _grgsm_swig.tch_f_decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tch_f_decoder_sptr self) -> bool"""
        return _grgsm_swig.tch_f_decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tch_f_decoder_sptr self, int m)"""
        return _grgsm_swig.tch_f_decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tch_f_decoder_sptr self) -> int"""
        return _grgsm_swig.tch_f_decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tch_f_decoder_sptr self, int i) -> long"""
        return _grgsm_swig.tch_f_decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tch_f_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(tch_f_decoder_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.tch_f_decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tch_f_decoder_sptr self, int i) -> long"""
        return _grgsm_swig.tch_f_decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tch_f_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(tch_f_decoder_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.tch_f_decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tch_f_decoder_sptr self, int which) -> float
        pc_input_buffers_full(tch_f_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tch_f_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(tch_f_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tch_f_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(tch_f_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tch_f_decoder_sptr self, int which) -> float
        pc_output_buffers_full(tch_f_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tch_f_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(tch_f_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tch_f_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(tch_f_decoder_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tch_f_decoder_sptr self) -> float"""
        return _grgsm_swig.tch_f_decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tch_f_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.tch_f_decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tch_f_decoder_sptr self)"""
        return _grgsm_swig.tch_f_decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tch_f_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.tch_f_decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tch_f_decoder_sptr self) -> int"""
        return _grgsm_swig.tch_f_decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tch_f_decoder_sptr self) -> int"""
        return _grgsm_swig.tch_f_decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tch_f_decoder_sptr self, int priority) -> int"""
        return _grgsm_swig.tch_f_decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tch_f_decoder_sptr self) -> std::string"""
        return _grgsm_swig.tch_f_decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tch_f_decoder_sptr self) -> std::string"""
        return _grgsm_swig.tch_f_decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tch_f_decoder_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.tch_f_decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tch_f_decoder_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.tch_f_decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tch_f_decoder_sptr self) -> long"""
        return _grgsm_swig.tch_f_decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tch_f_decoder_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.tch_f_decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tch_f_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.tch_f_decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tch_f_decoder_sptr self) -> std::string"""
        return _grgsm_swig.tch_f_decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tch_f_decoder_sptr self, std::string name)"""
        return _grgsm_swig.tch_f_decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tch_f_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.tch_f_decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tch_f_decoder_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.tch_f_decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tch_f_decoder_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.tch_f_decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tch_f_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.tch_f_decoder_sptr_message_subscribers(self, which_port)

tch_f_decoder_sptr_swigregister = _grgsm_swig.tch_f_decoder_sptr_swigregister
tch_f_decoder_sptr_swigregister(tch_f_decoder_sptr)


tch_f_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tch_f_decoder = tch_f_decoder.make;

class decryption(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(k_c, a5_version):
        """
        make(std::vector< uint8_t,std::allocator< uint8_t > > const & k_c, unsigned int a5_version) -> decryption_sptr

        Return a shared_ptr to a new instance of gsm::decryption.

        To avoid accidental use of raw pointers, gsm::decryption's constructor is in a private implementation class. gsm::decryption::make is the public interface for creating new instances.

        Params: (k_c, a5_version)
        """
        return _grgsm_swig.decryption_make(k_c, a5_version)

    make = staticmethod(make)

    def set_k_c(self, k_c):
        """
        set_k_c(decryption self, std::vector< uint8_t,std::allocator< uint8_t > > const & k_c)



        Params: (k_c)
        """
        return _grgsm_swig.decryption_set_k_c(self, k_c)


    def set_a5_version(self, a5_version):
        """
        set_a5_version(decryption self, unsigned int a5_version)



        Params: (a5_version)
        """
        return _grgsm_swig.decryption_set_a5_version(self, a5_version)

    __swig_destroy__ = _grgsm_swig.delete_decryption
    __del__ = lambda self: None
decryption_swigregister = _grgsm_swig.decryption_swigregister
decryption_swigregister(decryption)

def decryption_make(k_c, a5_version):
    """
    decryption_make(std::vector< uint8_t,std::allocator< uint8_t > > const & k_c, unsigned int a5_version) -> decryption_sptr

    Return a shared_ptr to a new instance of gsm::decryption.

    To avoid accidental use of raw pointers, gsm::decryption's constructor is in a private implementation class. gsm::decryption::make is the public interface for creating new instances.

    Params: (k_c, a5_version)
    """
    return _grgsm_swig.decryption_make(k_c, a5_version)

class decryption_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::decryption)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::decryption)> self) -> decryption_sptr
        __init__(boost::shared_ptr<(gr::gsm::decryption)> self, decryption p) -> decryption_sptr
        """
        this = _grgsm_swig.new_decryption_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decryption_sptr self) -> decryption"""
        return _grgsm_swig.decryption_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_decryption_sptr
    __del__ = lambda self: None

    def make(self, k_c, a5_version):
        """
        make(decryption_sptr self, std::vector< uint8_t,std::allocator< uint8_t > > const & k_c, unsigned int a5_version) -> decryption_sptr

        Return a shared_ptr to a new instance of gsm::decryption.

        To avoid accidental use of raw pointers, gsm::decryption's constructor is in a private implementation class. gsm::decryption::make is the public interface for creating new instances.

        Params: (k_c, a5_version)
        """
        return _grgsm_swig.decryption_sptr_make(self, k_c, a5_version)


    def set_k_c(self, k_c):
        """
        set_k_c(decryption_sptr self, std::vector< uint8_t,std::allocator< uint8_t > > const & k_c)



        Params: (k_c)
        """
        return _grgsm_swig.decryption_sptr_set_k_c(self, k_c)


    def set_a5_version(self, a5_version):
        """
        set_a5_version(decryption_sptr self, unsigned int a5_version)



        Params: (a5_version)
        """
        return _grgsm_swig.decryption_sptr_set_a5_version(self, a5_version)


    def history(self):
        """history(decryption_sptr self) -> unsigned int"""
        return _grgsm_swig.decryption_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decryption_sptr self, int which, int delay)
        declare_sample_delay(decryption_sptr self, unsigned int delay)
        """
        return _grgsm_swig.decryption_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decryption_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.decryption_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decryption_sptr self) -> int"""
        return _grgsm_swig.decryption_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decryption_sptr self) -> double"""
        return _grgsm_swig.decryption_sptr_relative_rate(self)


    def start(self):
        """start(decryption_sptr self) -> bool"""
        return _grgsm_swig.decryption_sptr_start(self)


    def stop(self):
        """stop(decryption_sptr self) -> bool"""
        return _grgsm_swig.decryption_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decryption_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.decryption_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decryption_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.decryption_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decryption_sptr self) -> int"""
        return _grgsm_swig.decryption_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decryption_sptr self, int m)"""
        return _grgsm_swig.decryption_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decryption_sptr self)"""
        return _grgsm_swig.decryption_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decryption_sptr self) -> bool"""
        return _grgsm_swig.decryption_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decryption_sptr self, int m)"""
        return _grgsm_swig.decryption_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decryption_sptr self) -> int"""
        return _grgsm_swig.decryption_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decryption_sptr self, int i) -> long"""
        return _grgsm_swig.decryption_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decryption_sptr self, long max_output_buffer)
        set_max_output_buffer(decryption_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.decryption_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decryption_sptr self, int i) -> long"""
        return _grgsm_swig.decryption_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decryption_sptr self, long min_output_buffer)
        set_min_output_buffer(decryption_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.decryption_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decryption_sptr self, int which) -> float
        pc_input_buffers_full(decryption_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.decryption_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decryption_sptr self, int which) -> float
        pc_input_buffers_full_avg(decryption_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.decryption_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decryption_sptr self, int which) -> float
        pc_input_buffers_full_var(decryption_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.decryption_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decryption_sptr self, int which) -> float
        pc_output_buffers_full(decryption_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.decryption_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decryption_sptr self, int which) -> float
        pc_output_buffers_full_avg(decryption_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.decryption_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decryption_sptr self, int which) -> float
        pc_output_buffers_full_var(decryption_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.decryption_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decryption_sptr self) -> float"""
        return _grgsm_swig.decryption_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decryption_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.decryption_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decryption_sptr self)"""
        return _grgsm_swig.decryption_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decryption_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.decryption_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decryption_sptr self) -> int"""
        return _grgsm_swig.decryption_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decryption_sptr self) -> int"""
        return _grgsm_swig.decryption_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decryption_sptr self, int priority) -> int"""
        return _grgsm_swig.decryption_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decryption_sptr self) -> std::string"""
        return _grgsm_swig.decryption_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decryption_sptr self) -> std::string"""
        return _grgsm_swig.decryption_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decryption_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.decryption_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decryption_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.decryption_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decryption_sptr self) -> long"""
        return _grgsm_swig.decryption_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decryption_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.decryption_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decryption_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.decryption_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decryption_sptr self) -> std::string"""
        return _grgsm_swig.decryption_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decryption_sptr self, std::string name)"""
        return _grgsm_swig.decryption_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decryption_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.decryption_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decryption_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.decryption_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decryption_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.decryption_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decryption_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.decryption_sptr_message_subscribers(self, which_port)

decryption_sptr_swigregister = _grgsm_swig.decryption_sptr_swigregister
decryption_sptr_swigregister(decryption_sptr)


decryption_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decryption = decryption.make;

class universal_ctrl_chans_demapper(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(timeslot_nr, starts_fn_mod51, channel_types):
        """
        make(unsigned int timeslot_nr, std::vector< int,std::allocator< int > > const & starts_fn_mod51, std::vector< int,std::allocator< int > > const & channel_types) -> universal_ctrl_chans_demapper_sptr

        Return a shared_ptr to a new instance of gsm::universal_ctrl_chans_demapper.

        To avoid accidental use of raw pointers, gsm::universal_ctrl_chans_demapper's constructor is in a private implementation class. gsm::universal_ctrl_chans_demapper::make is the public interface for creating new instances.

        Params: (timeslot_nr, starts_fn_mod51, channel_types)
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_make(timeslot_nr, starts_fn_mod51, channel_types)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_universal_ctrl_chans_demapper
    __del__ = lambda self: None
universal_ctrl_chans_demapper_swigregister = _grgsm_swig.universal_ctrl_chans_demapper_swigregister
universal_ctrl_chans_demapper_swigregister(universal_ctrl_chans_demapper)

def universal_ctrl_chans_demapper_make(timeslot_nr, starts_fn_mod51, channel_types):
    """
    universal_ctrl_chans_demapper_make(unsigned int timeslot_nr, std::vector< int,std::allocator< int > > const & starts_fn_mod51, std::vector< int,std::allocator< int > > const & channel_types) -> universal_ctrl_chans_demapper_sptr

    Return a shared_ptr to a new instance of gsm::universal_ctrl_chans_demapper.

    To avoid accidental use of raw pointers, gsm::universal_ctrl_chans_demapper's constructor is in a private implementation class. gsm::universal_ctrl_chans_demapper::make is the public interface for creating new instances.

    Params: (timeslot_nr, starts_fn_mod51, channel_types)
    """
    return _grgsm_swig.universal_ctrl_chans_demapper_make(timeslot_nr, starts_fn_mod51, channel_types)

class universal_ctrl_chans_demapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::universal_ctrl_chans_demapper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::universal_ctrl_chans_demapper)> self) -> universal_ctrl_chans_demapper_sptr
        __init__(boost::shared_ptr<(gr::gsm::universal_ctrl_chans_demapper)> self, universal_ctrl_chans_demapper p) -> universal_ctrl_chans_demapper_sptr
        """
        this = _grgsm_swig.new_universal_ctrl_chans_demapper_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(universal_ctrl_chans_demapper_sptr self) -> universal_ctrl_chans_demapper"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_universal_ctrl_chans_demapper_sptr
    __del__ = lambda self: None

    def make(self, timeslot_nr, starts_fn_mod51, channel_types):
        """
        make(universal_ctrl_chans_demapper_sptr self, unsigned int timeslot_nr, std::vector< int,std::allocator< int > > const & starts_fn_mod51, std::vector< int,std::allocator< int > > const & channel_types) -> universal_ctrl_chans_demapper_sptr

        Return a shared_ptr to a new instance of gsm::universal_ctrl_chans_demapper.

        To avoid accidental use of raw pointers, gsm::universal_ctrl_chans_demapper's constructor is in a private implementation class. gsm::universal_ctrl_chans_demapper::make is the public interface for creating new instances.

        Params: (timeslot_nr, starts_fn_mod51, channel_types)
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_make(self, timeslot_nr, starts_fn_mod51, channel_types)


    def history(self):
        """history(universal_ctrl_chans_demapper_sptr self) -> unsigned int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(universal_ctrl_chans_demapper_sptr self, int which, int delay)
        declare_sample_delay(universal_ctrl_chans_demapper_sptr self, unsigned int delay)
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(universal_ctrl_chans_demapper_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(universal_ctrl_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(universal_ctrl_chans_demapper_sptr self) -> double"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_relative_rate(self)


    def start(self):
        """start(universal_ctrl_chans_demapper_sptr self) -> bool"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_start(self)


    def stop(self):
        """stop(universal_ctrl_chans_demapper_sptr self) -> bool"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(universal_ctrl_chans_demapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(universal_ctrl_chans_demapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(universal_ctrl_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(universal_ctrl_chans_demapper_sptr self, int m)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(universal_ctrl_chans_demapper_sptr self)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(universal_ctrl_chans_demapper_sptr self) -> bool"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(universal_ctrl_chans_demapper_sptr self, int m)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(universal_ctrl_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(universal_ctrl_chans_demapper_sptr self, int i) -> long"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(universal_ctrl_chans_demapper_sptr self, long max_output_buffer)
        set_max_output_buffer(universal_ctrl_chans_demapper_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(universal_ctrl_chans_demapper_sptr self, int i) -> long"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(universal_ctrl_chans_demapper_sptr self, long min_output_buffer)
        set_min_output_buffer(universal_ctrl_chans_demapper_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(universal_ctrl_chans_demapper_sptr self, int which) -> float
        pc_input_buffers_full(universal_ctrl_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(universal_ctrl_chans_demapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(universal_ctrl_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(universal_ctrl_chans_demapper_sptr self, int which) -> float
        pc_input_buffers_full_var(universal_ctrl_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(universal_ctrl_chans_demapper_sptr self, int which) -> float
        pc_output_buffers_full(universal_ctrl_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(universal_ctrl_chans_demapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(universal_ctrl_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(universal_ctrl_chans_demapper_sptr self, int which) -> float
        pc_output_buffers_full_var(universal_ctrl_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(universal_ctrl_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(universal_ctrl_chans_demapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(universal_ctrl_chans_demapper_sptr self)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(universal_ctrl_chans_demapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(universal_ctrl_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(universal_ctrl_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(universal_ctrl_chans_demapper_sptr self, int priority) -> int"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(universal_ctrl_chans_demapper_sptr self) -> std::string"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(universal_ctrl_chans_demapper_sptr self) -> std::string"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(universal_ctrl_chans_demapper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(universal_ctrl_chans_demapper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(universal_ctrl_chans_demapper_sptr self) -> long"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(universal_ctrl_chans_demapper_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(universal_ctrl_chans_demapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(universal_ctrl_chans_demapper_sptr self) -> std::string"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(universal_ctrl_chans_demapper_sptr self, std::string name)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(universal_ctrl_chans_demapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(universal_ctrl_chans_demapper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(universal_ctrl_chans_demapper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(universal_ctrl_chans_demapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.universal_ctrl_chans_demapper_sptr_message_subscribers(self, which_port)

universal_ctrl_chans_demapper_sptr_swigregister = _grgsm_swig.universal_ctrl_chans_demapper_sptr_swigregister
universal_ctrl_chans_demapper_sptr_swigregister(universal_ctrl_chans_demapper_sptr)


universal_ctrl_chans_demapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
universal_ctrl_chans_demapper = universal_ctrl_chans_demapper.make;

class tch_f_chans_demapper(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(timeslot_nr):
        """
        make(unsigned int timeslot_nr) -> tch_f_chans_demapper_sptr

        Return a shared_ptr to a new instance of gsm::tch_f_chans_demapper.

        To avoid accidental use of raw pointers, gsm::tch_f_chans_demapper's constructor is in a private implementation class. gsm::tch_f_chans_demapper::make is the public interface for creating new instances.

        Params: (timeslot_nr)
        """
        return _grgsm_swig.tch_f_chans_demapper_make(timeslot_nr)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_tch_f_chans_demapper
    __del__ = lambda self: None
tch_f_chans_demapper_swigregister = _grgsm_swig.tch_f_chans_demapper_swigregister
tch_f_chans_demapper_swigregister(tch_f_chans_demapper)

def tch_f_chans_demapper_make(timeslot_nr):
    """
    tch_f_chans_demapper_make(unsigned int timeslot_nr) -> tch_f_chans_demapper_sptr

    Return a shared_ptr to a new instance of gsm::tch_f_chans_demapper.

    To avoid accidental use of raw pointers, gsm::tch_f_chans_demapper's constructor is in a private implementation class. gsm::tch_f_chans_demapper::make is the public interface for creating new instances.

    Params: (timeslot_nr)
    """
    return _grgsm_swig.tch_f_chans_demapper_make(timeslot_nr)

class tch_f_chans_demapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::tch_f_chans_demapper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::tch_f_chans_demapper)> self) -> tch_f_chans_demapper_sptr
        __init__(boost::shared_ptr<(gr::gsm::tch_f_chans_demapper)> self, tch_f_chans_demapper p) -> tch_f_chans_demapper_sptr
        """
        this = _grgsm_swig.new_tch_f_chans_demapper_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tch_f_chans_demapper_sptr self) -> tch_f_chans_demapper"""
        return _grgsm_swig.tch_f_chans_demapper_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_tch_f_chans_demapper_sptr
    __del__ = lambda self: None

    def make(self, timeslot_nr):
        """
        make(tch_f_chans_demapper_sptr self, unsigned int timeslot_nr) -> tch_f_chans_demapper_sptr

        Return a shared_ptr to a new instance of gsm::tch_f_chans_demapper.

        To avoid accidental use of raw pointers, gsm::tch_f_chans_demapper's constructor is in a private implementation class. gsm::tch_f_chans_demapper::make is the public interface for creating new instances.

        Params: (timeslot_nr)
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_make(self, timeslot_nr)


    def history(self):
        """history(tch_f_chans_demapper_sptr self) -> unsigned int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tch_f_chans_demapper_sptr self, int which, int delay)
        declare_sample_delay(tch_f_chans_demapper_sptr self, unsigned int delay)
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tch_f_chans_demapper_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tch_f_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tch_f_chans_demapper_sptr self) -> double"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_relative_rate(self)


    def start(self):
        """start(tch_f_chans_demapper_sptr self) -> bool"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_start(self)


    def stop(self):
        """stop(tch_f_chans_demapper_sptr self) -> bool"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tch_f_chans_demapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tch_f_chans_demapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tch_f_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tch_f_chans_demapper_sptr self, int m)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tch_f_chans_demapper_sptr self)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tch_f_chans_demapper_sptr self) -> bool"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tch_f_chans_demapper_sptr self, int m)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tch_f_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tch_f_chans_demapper_sptr self, int i) -> long"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tch_f_chans_demapper_sptr self, long max_output_buffer)
        set_max_output_buffer(tch_f_chans_demapper_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tch_f_chans_demapper_sptr self, int i) -> long"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tch_f_chans_demapper_sptr self, long min_output_buffer)
        set_min_output_buffer(tch_f_chans_demapper_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tch_f_chans_demapper_sptr self, int which) -> float
        pc_input_buffers_full(tch_f_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tch_f_chans_demapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(tch_f_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tch_f_chans_demapper_sptr self, int which) -> float
        pc_input_buffers_full_var(tch_f_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tch_f_chans_demapper_sptr self, int which) -> float
        pc_output_buffers_full(tch_f_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tch_f_chans_demapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(tch_f_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tch_f_chans_demapper_sptr self, int which) -> float
        pc_output_buffers_full_var(tch_f_chans_demapper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tch_f_chans_demapper_sptr self) -> float"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tch_f_chans_demapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tch_f_chans_demapper_sptr self)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tch_f_chans_demapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tch_f_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tch_f_chans_demapper_sptr self) -> int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tch_f_chans_demapper_sptr self, int priority) -> int"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tch_f_chans_demapper_sptr self) -> std::string"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tch_f_chans_demapper_sptr self) -> std::string"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tch_f_chans_demapper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tch_f_chans_demapper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tch_f_chans_demapper_sptr self) -> long"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tch_f_chans_demapper_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tch_f_chans_demapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tch_f_chans_demapper_sptr self) -> std::string"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tch_f_chans_demapper_sptr self, std::string name)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tch_f_chans_demapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.tch_f_chans_demapper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tch_f_chans_demapper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tch_f_chans_demapper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tch_f_chans_demapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.tch_f_chans_demapper_sptr_message_subscribers(self, which_port)

tch_f_chans_demapper_sptr_swigregister = _grgsm_swig.tch_f_chans_demapper_sptr_swigregister
tch_f_chans_demapper_sptr_swigregister(tch_f_chans_demapper_sptr)


tch_f_chans_demapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tch_f_chans_demapper = tch_f_chans_demapper.make;

class burst_timeslot_splitter(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> burst_timeslot_splitter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_timeslot_splitter.

        To avoid accidental use of raw pointers, grgsm::burst_timeslot_splitter's constructor is in a private implementation class. grgsm::burst_timeslot_splitter::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.burst_timeslot_splitter_make()

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_timeslot_splitter
    __del__ = lambda self: None
burst_timeslot_splitter_swigregister = _grgsm_swig.burst_timeslot_splitter_swigregister
burst_timeslot_splitter_swigregister(burst_timeslot_splitter)

def burst_timeslot_splitter_make():
    """
    burst_timeslot_splitter_make() -> burst_timeslot_splitter_sptr

    Return a shared_ptr to a new instance of grgsm::burst_timeslot_splitter.

    To avoid accidental use of raw pointers, grgsm::burst_timeslot_splitter's constructor is in a private implementation class. grgsm::burst_timeslot_splitter::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.burst_timeslot_splitter_make()

class burst_timeslot_splitter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_timeslot_splitter)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_timeslot_splitter)> self) -> burst_timeslot_splitter_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_timeslot_splitter)> self, burst_timeslot_splitter p) -> burst_timeslot_splitter_sptr
        """
        this = _grgsm_swig.new_burst_timeslot_splitter_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_timeslot_splitter_sptr self) -> burst_timeslot_splitter"""
        return _grgsm_swig.burst_timeslot_splitter_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_timeslot_splitter_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(burst_timeslot_splitter_sptr self) -> burst_timeslot_splitter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_timeslot_splitter.

        To avoid accidental use of raw pointers, grgsm::burst_timeslot_splitter's constructor is in a private implementation class. grgsm::burst_timeslot_splitter::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_make(self)


    def history(self):
        """history(burst_timeslot_splitter_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_timeslot_splitter_sptr self, int which, int delay)
        declare_sample_delay(burst_timeslot_splitter_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_timeslot_splitter_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_timeslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_timeslot_splitter_sptr self) -> double"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_relative_rate(self)


    def start(self):
        """start(burst_timeslot_splitter_sptr self) -> bool"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_start(self)


    def stop(self):
        """stop(burst_timeslot_splitter_sptr self) -> bool"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_timeslot_splitter_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_timeslot_splitter_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_timeslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_timeslot_splitter_sptr self, int m)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_timeslot_splitter_sptr self)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_timeslot_splitter_sptr self) -> bool"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_timeslot_splitter_sptr self, int m)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_timeslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_timeslot_splitter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_timeslot_splitter_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_timeslot_splitter_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_timeslot_splitter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_timeslot_splitter_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_timeslot_splitter_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_timeslot_splitter_sptr self, int which) -> float
        pc_input_buffers_full(burst_timeslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_timeslot_splitter_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_timeslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_timeslot_splitter_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_timeslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_timeslot_splitter_sptr self, int which) -> float
        pc_output_buffers_full(burst_timeslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_timeslot_splitter_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_timeslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_timeslot_splitter_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_timeslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_timeslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_timeslot_splitter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_timeslot_splitter_sptr self)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_timeslot_splitter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_timeslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_timeslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_timeslot_splitter_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_timeslot_splitter_sptr self) -> std::string"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_timeslot_splitter_sptr self) -> std::string"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_timeslot_splitter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_timeslot_splitter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_timeslot_splitter_sptr self) -> long"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_timeslot_splitter_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_timeslot_splitter_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_timeslot_splitter_sptr self) -> std::string"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_timeslot_splitter_sptr self, std::string name)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_timeslot_splitter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_timeslot_splitter_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_timeslot_splitter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_timeslot_splitter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_timeslot_splitter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_timeslot_splitter_sptr_message_subscribers(self, which_port)

burst_timeslot_splitter_sptr_swigregister = _grgsm_swig.burst_timeslot_splitter_sptr_swigregister
burst_timeslot_splitter_sptr_swigregister(burst_timeslot_splitter_sptr)


burst_timeslot_splitter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_timeslot_splitter = burst_timeslot_splitter.make;


_grgsm_swig.SPLITTER_SDCCH8_swigconstant(_grgsm_swig)
SPLITTER_SDCCH8 = _grgsm_swig.SPLITTER_SDCCH8

_grgsm_swig.SPLITTER_SDCCH4_swigconstant(_grgsm_swig)
SPLITTER_SDCCH4 = _grgsm_swig.SPLITTER_SDCCH4
class burst_sdcch_subslot_splitter(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mode):
        """
        make(gr::gsm::splitter_mode mode) -> burst_sdcch_subslot_splitter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_sdcch_subslot_splitter.

        To avoid accidental use of raw pointers, grgsm::burst_sdcch_subslot_splitter's constructor is in a private implementation class. grgsm::burst_sdcch_subslot_splitter::make is the public interface for creating new instances.

        Params: (mode)
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_make(mode)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_sdcch_subslot_splitter
    __del__ = lambda self: None
burst_sdcch_subslot_splitter_swigregister = _grgsm_swig.burst_sdcch_subslot_splitter_swigregister
burst_sdcch_subslot_splitter_swigregister(burst_sdcch_subslot_splitter)

def burst_sdcch_subslot_splitter_make(mode):
    """
    burst_sdcch_subslot_splitter_make(gr::gsm::splitter_mode mode) -> burst_sdcch_subslot_splitter_sptr

    Return a shared_ptr to a new instance of grgsm::burst_sdcch_subslot_splitter.

    To avoid accidental use of raw pointers, grgsm::burst_sdcch_subslot_splitter's constructor is in a private implementation class. grgsm::burst_sdcch_subslot_splitter::make is the public interface for creating new instances.

    Params: (mode)
    """
    return _grgsm_swig.burst_sdcch_subslot_splitter_make(mode)

class burst_sdcch_subslot_splitter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_sdcch_subslot_splitter)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_sdcch_subslot_splitter)> self) -> burst_sdcch_subslot_splitter_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_sdcch_subslot_splitter)> self, burst_sdcch_subslot_splitter p) -> burst_sdcch_subslot_splitter_sptr
        """
        this = _grgsm_swig.new_burst_sdcch_subslot_splitter_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_sdcch_subslot_splitter_sptr self) -> burst_sdcch_subslot_splitter"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_sdcch_subslot_splitter_sptr
    __del__ = lambda self: None

    def make(self, mode):
        """
        make(burst_sdcch_subslot_splitter_sptr self, gr::gsm::splitter_mode mode) -> burst_sdcch_subslot_splitter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_sdcch_subslot_splitter.

        To avoid accidental use of raw pointers, grgsm::burst_sdcch_subslot_splitter's constructor is in a private implementation class. grgsm::burst_sdcch_subslot_splitter::make is the public interface for creating new instances.

        Params: (mode)
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_make(self, mode)


    def history(self):
        """history(burst_sdcch_subslot_splitter_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_sdcch_subslot_splitter_sptr self, int which, int delay)
        declare_sample_delay(burst_sdcch_subslot_splitter_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_sdcch_subslot_splitter_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_sdcch_subslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_sdcch_subslot_splitter_sptr self) -> double"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_relative_rate(self)


    def start(self):
        """start(burst_sdcch_subslot_splitter_sptr self) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_start(self)


    def stop(self):
        """stop(burst_sdcch_subslot_splitter_sptr self) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_sdcch_subslot_splitter_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_sdcch_subslot_splitter_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_sdcch_subslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_sdcch_subslot_splitter_sptr self, int m)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_sdcch_subslot_splitter_sptr self)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_sdcch_subslot_splitter_sptr self) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_sdcch_subslot_splitter_sptr self, int m)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_sdcch_subslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_sdcch_subslot_splitter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_sdcch_subslot_splitter_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_sdcch_subslot_splitter_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_sdcch_subslot_splitter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_sdcch_subslot_splitter_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_sdcch_subslot_splitter_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_sdcch_subslot_splitter_sptr self, int which) -> float
        pc_input_buffers_full(burst_sdcch_subslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_sdcch_subslot_splitter_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_sdcch_subslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_sdcch_subslot_splitter_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_sdcch_subslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_sdcch_subslot_splitter_sptr self, int which) -> float
        pc_output_buffers_full(burst_sdcch_subslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_sdcch_subslot_splitter_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_sdcch_subslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_sdcch_subslot_splitter_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_sdcch_subslot_splitter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_sdcch_subslot_splitter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_sdcch_subslot_splitter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_sdcch_subslot_splitter_sptr self)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_sdcch_subslot_splitter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_sdcch_subslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_sdcch_subslot_splitter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_sdcch_subslot_splitter_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_sdcch_subslot_splitter_sptr self) -> std::string"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_sdcch_subslot_splitter_sptr self) -> std::string"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_sdcch_subslot_splitter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_sdcch_subslot_splitter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_sdcch_subslot_splitter_sptr self) -> long"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_sdcch_subslot_splitter_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_sdcch_subslot_splitter_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_sdcch_subslot_splitter_sptr self) -> std::string"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_sdcch_subslot_splitter_sptr self, std::string name)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_sdcch_subslot_splitter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_sdcch_subslot_splitter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_sdcch_subslot_splitter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_sdcch_subslot_splitter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_sdcch_subslot_splitter_sptr_message_subscribers(self, which_port)

burst_sdcch_subslot_splitter_sptr_swigregister = _grgsm_swig.burst_sdcch_subslot_splitter_sptr_swigregister
burst_sdcch_subslot_splitter_sptr_swigregister(burst_sdcch_subslot_splitter_sptr)


burst_sdcch_subslot_splitter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_sdcch_subslot_splitter = burst_sdcch_subslot_splitter.make;

class burst_timeslot_filter(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(timeslot):
        """
        make(unsigned int timeslot) -> burst_timeslot_filter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_timeslot_filter.

        To avoid accidental use of raw pointers, grgsm::burst_timeslot_filter's constructor is in a private implementation class. grgsm::burst_timeslot_filter::make is the public interface for creating new instances.

        Params: (timeslot)
        """
        return _grgsm_swig.burst_timeslot_filter_make(timeslot)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_timeslot_filter
    __del__ = lambda self: None
burst_timeslot_filter_swigregister = _grgsm_swig.burst_timeslot_filter_swigregister
burst_timeslot_filter_swigregister(burst_timeslot_filter)

def burst_timeslot_filter_make(timeslot):
    """
    burst_timeslot_filter_make(unsigned int timeslot) -> burst_timeslot_filter_sptr

    Return a shared_ptr to a new instance of grgsm::burst_timeslot_filter.

    To avoid accidental use of raw pointers, grgsm::burst_timeslot_filter's constructor is in a private implementation class. grgsm::burst_timeslot_filter::make is the public interface for creating new instances.

    Params: (timeslot)
    """
    return _grgsm_swig.burst_timeslot_filter_make(timeslot)

class burst_timeslot_filter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_timeslot_filter)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_timeslot_filter)> self) -> burst_timeslot_filter_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_timeslot_filter)> self, burst_timeslot_filter p) -> burst_timeslot_filter_sptr
        """
        this = _grgsm_swig.new_burst_timeslot_filter_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_timeslot_filter_sptr self) -> burst_timeslot_filter"""
        return _grgsm_swig.burst_timeslot_filter_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_timeslot_filter_sptr
    __del__ = lambda self: None

    def make(self, timeslot):
        """
        make(burst_timeslot_filter_sptr self, unsigned int timeslot) -> burst_timeslot_filter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_timeslot_filter.

        To avoid accidental use of raw pointers, grgsm::burst_timeslot_filter's constructor is in a private implementation class. grgsm::burst_timeslot_filter::make is the public interface for creating new instances.

        Params: (timeslot)
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_make(self, timeslot)


    def history(self):
        """history(burst_timeslot_filter_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_timeslot_filter_sptr self, int which, int delay)
        declare_sample_delay(burst_timeslot_filter_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_timeslot_filter_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_timeslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_timeslot_filter_sptr self) -> double"""
        return _grgsm_swig.burst_timeslot_filter_sptr_relative_rate(self)


    def start(self):
        """start(burst_timeslot_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_timeslot_filter_sptr_start(self)


    def stop(self):
        """stop(burst_timeslot_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_timeslot_filter_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_timeslot_filter_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_timeslot_filter_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_timeslot_filter_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_timeslot_filter_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_timeslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_timeslot_filter_sptr self, int m)"""
        return _grgsm_swig.burst_timeslot_filter_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_timeslot_filter_sptr self)"""
        return _grgsm_swig.burst_timeslot_filter_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_timeslot_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_timeslot_filter_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_timeslot_filter_sptr self, int m)"""
        return _grgsm_swig.burst_timeslot_filter_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_timeslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_timeslot_filter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_timeslot_filter_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_timeslot_filter_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_timeslot_filter_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_timeslot_filter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_timeslot_filter_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_timeslot_filter_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_timeslot_filter_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_timeslot_filter_sptr self, int which) -> float
        pc_input_buffers_full(burst_timeslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_timeslot_filter_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_timeslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_timeslot_filter_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_timeslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_timeslot_filter_sptr self, int which) -> float
        pc_output_buffers_full(burst_timeslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_timeslot_filter_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_timeslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_timeslot_filter_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_timeslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_timeslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_timeslot_filter_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_timeslot_filter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_timeslot_filter_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_timeslot_filter_sptr self)"""
        return _grgsm_swig.burst_timeslot_filter_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_timeslot_filter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_timeslot_filter_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_timeslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_timeslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_timeslot_filter_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_timeslot_filter_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_timeslot_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_timeslot_filter_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_timeslot_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_timeslot_filter_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_timeslot_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_timeslot_filter_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_timeslot_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_timeslot_filter_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_timeslot_filter_sptr self) -> long"""
        return _grgsm_swig.burst_timeslot_filter_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_timeslot_filter_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_timeslot_filter_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_timeslot_filter_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_timeslot_filter_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_timeslot_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_timeslot_filter_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_timeslot_filter_sptr self, std::string name)"""
        return _grgsm_swig.burst_timeslot_filter_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_timeslot_filter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_timeslot_filter_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_timeslot_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_timeslot_filter_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_timeslot_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_timeslot_filter_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_timeslot_filter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_timeslot_filter_sptr_message_subscribers(self, which_port)

burst_timeslot_filter_sptr_swigregister = _grgsm_swig.burst_timeslot_filter_sptr_swigregister
burst_timeslot_filter_sptr_swigregister(burst_timeslot_filter_sptr)


burst_timeslot_filter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_timeslot_filter = burst_timeslot_filter.make;


_grgsm_swig.SS_FILTER_SDCCH8_swigconstant(_grgsm_swig)
SS_FILTER_SDCCH8 = _grgsm_swig.SS_FILTER_SDCCH8

_grgsm_swig.SS_FILTER_SDCCH4_swigconstant(_grgsm_swig)
SS_FILTER_SDCCH4 = _grgsm_swig.SS_FILTER_SDCCH4
class burst_sdcch_subslot_filter(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mode, subslot):
        """
        make(gr::gsm::subslot_filter_mode mode, unsigned int subslot) -> burst_sdcch_subslot_filter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_sdcch_subslot_filter.

        To avoid accidental use of raw pointers, grgsm::burst_sdcch_subslot_filter's constructor is in a private implementation class. grgsm::burst_sdcch_subslot_filter::make is the public interface for creating new instances.

        Params: (mode, subslot)
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_make(mode, subslot)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_sdcch_subslot_filter
    __del__ = lambda self: None
burst_sdcch_subslot_filter_swigregister = _grgsm_swig.burst_sdcch_subslot_filter_swigregister
burst_sdcch_subslot_filter_swigregister(burst_sdcch_subslot_filter)

def burst_sdcch_subslot_filter_make(mode, subslot):
    """
    burst_sdcch_subslot_filter_make(gr::gsm::subslot_filter_mode mode, unsigned int subslot) -> burst_sdcch_subslot_filter_sptr

    Return a shared_ptr to a new instance of grgsm::burst_sdcch_subslot_filter.

    To avoid accidental use of raw pointers, grgsm::burst_sdcch_subslot_filter's constructor is in a private implementation class. grgsm::burst_sdcch_subslot_filter::make is the public interface for creating new instances.

    Params: (mode, subslot)
    """
    return _grgsm_swig.burst_sdcch_subslot_filter_make(mode, subslot)

class burst_sdcch_subslot_filter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_sdcch_subslot_filter)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_sdcch_subslot_filter)> self) -> burst_sdcch_subslot_filter_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_sdcch_subslot_filter)> self, burst_sdcch_subslot_filter p) -> burst_sdcch_subslot_filter_sptr
        """
        this = _grgsm_swig.new_burst_sdcch_subslot_filter_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_sdcch_subslot_filter_sptr self) -> burst_sdcch_subslot_filter"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_sdcch_subslot_filter_sptr
    __del__ = lambda self: None

    def make(self, mode, subslot):
        """
        make(burst_sdcch_subslot_filter_sptr self, gr::gsm::subslot_filter_mode mode, unsigned int subslot) -> burst_sdcch_subslot_filter_sptr

        Return a shared_ptr to a new instance of grgsm::burst_sdcch_subslot_filter.

        To avoid accidental use of raw pointers, grgsm::burst_sdcch_subslot_filter's constructor is in a private implementation class. grgsm::burst_sdcch_subslot_filter::make is the public interface for creating new instances.

        Params: (mode, subslot)
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_make(self, mode, subslot)


    def history(self):
        """history(burst_sdcch_subslot_filter_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_sdcch_subslot_filter_sptr self, int which, int delay)
        declare_sample_delay(burst_sdcch_subslot_filter_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_sdcch_subslot_filter_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_sdcch_subslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_sdcch_subslot_filter_sptr self) -> double"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_relative_rate(self)


    def start(self):
        """start(burst_sdcch_subslot_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_start(self)


    def stop(self):
        """stop(burst_sdcch_subslot_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_sdcch_subslot_filter_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_sdcch_subslot_filter_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_sdcch_subslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_sdcch_subslot_filter_sptr self, int m)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_sdcch_subslot_filter_sptr self)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_sdcch_subslot_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_sdcch_subslot_filter_sptr self, int m)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_sdcch_subslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_sdcch_subslot_filter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_sdcch_subslot_filter_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_sdcch_subslot_filter_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_sdcch_subslot_filter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_sdcch_subslot_filter_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_sdcch_subslot_filter_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_sdcch_subslot_filter_sptr self, int which) -> float
        pc_input_buffers_full(burst_sdcch_subslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_sdcch_subslot_filter_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_sdcch_subslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_sdcch_subslot_filter_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_sdcch_subslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_sdcch_subslot_filter_sptr self, int which) -> float
        pc_output_buffers_full(burst_sdcch_subslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_sdcch_subslot_filter_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_sdcch_subslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_sdcch_subslot_filter_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_sdcch_subslot_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_sdcch_subslot_filter_sptr self) -> float"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_sdcch_subslot_filter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_sdcch_subslot_filter_sptr self)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_sdcch_subslot_filter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_sdcch_subslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_sdcch_subslot_filter_sptr self) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_sdcch_subslot_filter_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_sdcch_subslot_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_sdcch_subslot_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_sdcch_subslot_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_sdcch_subslot_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_sdcch_subslot_filter_sptr self) -> long"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_sdcch_subslot_filter_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_sdcch_subslot_filter_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_sdcch_subslot_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_sdcch_subslot_filter_sptr self, std::string name)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_sdcch_subslot_filter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_sdcch_subslot_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_sdcch_subslot_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_sdcch_subslot_filter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_sdcch_subslot_filter_sptr_message_subscribers(self, which_port)

burst_sdcch_subslot_filter_sptr_swigregister = _grgsm_swig.burst_sdcch_subslot_filter_sptr_swigregister
burst_sdcch_subslot_filter_sptr_swigregister(burst_sdcch_subslot_filter_sptr)


burst_sdcch_subslot_filter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_sdcch_subslot_filter = burst_sdcch_subslot_filter.make;


_grgsm_swig.FILTER_LESS_OR_EQUAL_swigconstant(_grgsm_swig)
FILTER_LESS_OR_EQUAL = _grgsm_swig.FILTER_LESS_OR_EQUAL

_grgsm_swig.FILTER_GREATER_OR_EQUAL_swigconstant(_grgsm_swig)
FILTER_GREATER_OR_EQUAL = _grgsm_swig.FILTER_GREATER_OR_EQUAL
class burst_fnr_filter(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mode, fnr):
        """
        make(gr::gsm::filter_mode mode, unsigned int fnr) -> burst_fnr_filter_sptr

        Return a shared_ptr to a new instance of gsm::burst_fnr_filter.

        To avoid accidental use of raw pointers, gsm::burst_fnr_filter's constructor is in a private implementation class. gsm::burst_fnr_filter::make is the public interface for creating new instances.

        Params: (mode, fnr)
        """
        return _grgsm_swig.burst_fnr_filter_make(mode, fnr)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_fnr_filter
    __del__ = lambda self: None
burst_fnr_filter_swigregister = _grgsm_swig.burst_fnr_filter_swigregister
burst_fnr_filter_swigregister(burst_fnr_filter)

def burst_fnr_filter_make(mode, fnr):
    """
    burst_fnr_filter_make(gr::gsm::filter_mode mode, unsigned int fnr) -> burst_fnr_filter_sptr

    Return a shared_ptr to a new instance of gsm::burst_fnr_filter.

    To avoid accidental use of raw pointers, gsm::burst_fnr_filter's constructor is in a private implementation class. gsm::burst_fnr_filter::make is the public interface for creating new instances.

    Params: (mode, fnr)
    """
    return _grgsm_swig.burst_fnr_filter_make(mode, fnr)

class burst_fnr_filter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_fnr_filter)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_fnr_filter)> self) -> burst_fnr_filter_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_fnr_filter)> self, burst_fnr_filter p) -> burst_fnr_filter_sptr
        """
        this = _grgsm_swig.new_burst_fnr_filter_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_fnr_filter_sptr self) -> burst_fnr_filter"""
        return _grgsm_swig.burst_fnr_filter_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_fnr_filter_sptr
    __del__ = lambda self: None

    def make(self, mode, fnr):
        """
        make(burst_fnr_filter_sptr self, gr::gsm::filter_mode mode, unsigned int fnr) -> burst_fnr_filter_sptr

        Return a shared_ptr to a new instance of gsm::burst_fnr_filter.

        To avoid accidental use of raw pointers, gsm::burst_fnr_filter's constructor is in a private implementation class. gsm::burst_fnr_filter::make is the public interface for creating new instances.

        Params: (mode, fnr)
        """
        return _grgsm_swig.burst_fnr_filter_sptr_make(self, mode, fnr)


    def history(self):
        """history(burst_fnr_filter_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_fnr_filter_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_fnr_filter_sptr self, int which, int delay)
        declare_sample_delay(burst_fnr_filter_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_fnr_filter_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_fnr_filter_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_fnr_filter_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_fnr_filter_sptr self) -> int"""
        return _grgsm_swig.burst_fnr_filter_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_fnr_filter_sptr self) -> double"""
        return _grgsm_swig.burst_fnr_filter_sptr_relative_rate(self)


    def start(self):
        """start(burst_fnr_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_fnr_filter_sptr_start(self)


    def stop(self):
        """stop(burst_fnr_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_fnr_filter_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_fnr_filter_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_fnr_filter_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_fnr_filter_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_fnr_filter_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_fnr_filter_sptr self) -> int"""
        return _grgsm_swig.burst_fnr_filter_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_fnr_filter_sptr self, int m)"""
        return _grgsm_swig.burst_fnr_filter_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_fnr_filter_sptr self)"""
        return _grgsm_swig.burst_fnr_filter_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_fnr_filter_sptr self) -> bool"""
        return _grgsm_swig.burst_fnr_filter_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_fnr_filter_sptr self, int m)"""
        return _grgsm_swig.burst_fnr_filter_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_fnr_filter_sptr self) -> int"""
        return _grgsm_swig.burst_fnr_filter_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_fnr_filter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_fnr_filter_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_fnr_filter_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_fnr_filter_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_fnr_filter_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_fnr_filter_sptr self, int i) -> long"""
        return _grgsm_swig.burst_fnr_filter_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_fnr_filter_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_fnr_filter_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_fnr_filter_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_fnr_filter_sptr self, int which) -> float
        pc_input_buffers_full(burst_fnr_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_fnr_filter_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_fnr_filter_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_fnr_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_fnr_filter_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_fnr_filter_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_fnr_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_fnr_filter_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_fnr_filter_sptr self, int which) -> float
        pc_output_buffers_full(burst_fnr_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_fnr_filter_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_fnr_filter_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_fnr_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_fnr_filter_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_fnr_filter_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_fnr_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_fnr_filter_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_fnr_filter_sptr self) -> float"""
        return _grgsm_swig.burst_fnr_filter_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_fnr_filter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_fnr_filter_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_fnr_filter_sptr self)"""
        return _grgsm_swig.burst_fnr_filter_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_fnr_filter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_fnr_filter_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_fnr_filter_sptr self) -> int"""
        return _grgsm_swig.burst_fnr_filter_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_fnr_filter_sptr self) -> int"""
        return _grgsm_swig.burst_fnr_filter_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_fnr_filter_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_fnr_filter_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_fnr_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_fnr_filter_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_fnr_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_fnr_filter_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_fnr_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_fnr_filter_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_fnr_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_fnr_filter_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_fnr_filter_sptr self) -> long"""
        return _grgsm_swig.burst_fnr_filter_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_fnr_filter_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_fnr_filter_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_fnr_filter_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_fnr_filter_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_fnr_filter_sptr self) -> std::string"""
        return _grgsm_swig.burst_fnr_filter_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_fnr_filter_sptr self, std::string name)"""
        return _grgsm_swig.burst_fnr_filter_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_fnr_filter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_fnr_filter_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_fnr_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_fnr_filter_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_fnr_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_fnr_filter_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_fnr_filter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_fnr_filter_sptr_message_subscribers(self, which_port)

burst_fnr_filter_sptr_swigregister = _grgsm_swig.burst_fnr_filter_sptr_swigregister
burst_fnr_filter_sptr_swigregister(burst_fnr_filter_sptr)


burst_fnr_filter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_fnr_filter = burst_fnr_filter.make;

class dummy_burst_filter(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> dummy_burst_filter_sptr

        Return a shared_ptr to a new instance of grgsm::dummy_burst_filter.

        To avoid accidental use of raw pointers, grgsm::dummy_burst_filter's constructor is in a private implementation class. grgsm::dummy_burst_filter::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.dummy_burst_filter_make()

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_dummy_burst_filter
    __del__ = lambda self: None
dummy_burst_filter_swigregister = _grgsm_swig.dummy_burst_filter_swigregister
dummy_burst_filter_swigregister(dummy_burst_filter)

def dummy_burst_filter_make():
    """
    dummy_burst_filter_make() -> dummy_burst_filter_sptr

    Return a shared_ptr to a new instance of grgsm::dummy_burst_filter.

    To avoid accidental use of raw pointers, grgsm::dummy_burst_filter's constructor is in a private implementation class. grgsm::dummy_burst_filter::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.dummy_burst_filter_make()

class dummy_burst_filter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::dummy_burst_filter)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::dummy_burst_filter)> self) -> dummy_burst_filter_sptr
        __init__(boost::shared_ptr<(gr::gsm::dummy_burst_filter)> self, dummy_burst_filter p) -> dummy_burst_filter_sptr
        """
        this = _grgsm_swig.new_dummy_burst_filter_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dummy_burst_filter_sptr self) -> dummy_burst_filter"""
        return _grgsm_swig.dummy_burst_filter_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_dummy_burst_filter_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(dummy_burst_filter_sptr self) -> dummy_burst_filter_sptr

        Return a shared_ptr to a new instance of grgsm::dummy_burst_filter.

        To avoid accidental use of raw pointers, grgsm::dummy_burst_filter's constructor is in a private implementation class. grgsm::dummy_burst_filter::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.dummy_burst_filter_sptr_make(self)


    def history(self):
        """history(dummy_burst_filter_sptr self) -> unsigned int"""
        return _grgsm_swig.dummy_burst_filter_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dummy_burst_filter_sptr self, int which, int delay)
        declare_sample_delay(dummy_burst_filter_sptr self, unsigned int delay)
        """
        return _grgsm_swig.dummy_burst_filter_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dummy_burst_filter_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.dummy_burst_filter_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dummy_burst_filter_sptr self) -> int"""
        return _grgsm_swig.dummy_burst_filter_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dummy_burst_filter_sptr self) -> double"""
        return _grgsm_swig.dummy_burst_filter_sptr_relative_rate(self)


    def start(self):
        """start(dummy_burst_filter_sptr self) -> bool"""
        return _grgsm_swig.dummy_burst_filter_sptr_start(self)


    def stop(self):
        """stop(dummy_burst_filter_sptr self) -> bool"""
        return _grgsm_swig.dummy_burst_filter_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dummy_burst_filter_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.dummy_burst_filter_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dummy_burst_filter_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.dummy_burst_filter_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dummy_burst_filter_sptr self) -> int"""
        return _grgsm_swig.dummy_burst_filter_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dummy_burst_filter_sptr self, int m)"""
        return _grgsm_swig.dummy_burst_filter_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dummy_burst_filter_sptr self)"""
        return _grgsm_swig.dummy_burst_filter_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dummy_burst_filter_sptr self) -> bool"""
        return _grgsm_swig.dummy_burst_filter_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dummy_burst_filter_sptr self, int m)"""
        return _grgsm_swig.dummy_burst_filter_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dummy_burst_filter_sptr self) -> int"""
        return _grgsm_swig.dummy_burst_filter_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dummy_burst_filter_sptr self, int i) -> long"""
        return _grgsm_swig.dummy_burst_filter_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dummy_burst_filter_sptr self, long max_output_buffer)
        set_max_output_buffer(dummy_burst_filter_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.dummy_burst_filter_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dummy_burst_filter_sptr self, int i) -> long"""
        return _grgsm_swig.dummy_burst_filter_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dummy_burst_filter_sptr self, long min_output_buffer)
        set_min_output_buffer(dummy_burst_filter_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.dummy_burst_filter_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dummy_burst_filter_sptr self, int which) -> float
        pc_input_buffers_full(dummy_burst_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.dummy_burst_filter_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dummy_burst_filter_sptr self, int which) -> float
        pc_input_buffers_full_avg(dummy_burst_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.dummy_burst_filter_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dummy_burst_filter_sptr self, int which) -> float
        pc_input_buffers_full_var(dummy_burst_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.dummy_burst_filter_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dummy_burst_filter_sptr self, int which) -> float
        pc_output_buffers_full(dummy_burst_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.dummy_burst_filter_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dummy_burst_filter_sptr self, int which) -> float
        pc_output_buffers_full_avg(dummy_burst_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.dummy_burst_filter_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dummy_burst_filter_sptr self, int which) -> float
        pc_output_buffers_full_var(dummy_burst_filter_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.dummy_burst_filter_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dummy_burst_filter_sptr self) -> float"""
        return _grgsm_swig.dummy_burst_filter_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dummy_burst_filter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.dummy_burst_filter_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dummy_burst_filter_sptr self)"""
        return _grgsm_swig.dummy_burst_filter_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dummy_burst_filter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.dummy_burst_filter_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dummy_burst_filter_sptr self) -> int"""
        return _grgsm_swig.dummy_burst_filter_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dummy_burst_filter_sptr self) -> int"""
        return _grgsm_swig.dummy_burst_filter_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dummy_burst_filter_sptr self, int priority) -> int"""
        return _grgsm_swig.dummy_burst_filter_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dummy_burst_filter_sptr self) -> std::string"""
        return _grgsm_swig.dummy_burst_filter_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dummy_burst_filter_sptr self) -> std::string"""
        return _grgsm_swig.dummy_burst_filter_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dummy_burst_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.dummy_burst_filter_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dummy_burst_filter_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.dummy_burst_filter_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dummy_burst_filter_sptr self) -> long"""
        return _grgsm_swig.dummy_burst_filter_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dummy_burst_filter_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.dummy_burst_filter_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dummy_burst_filter_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.dummy_burst_filter_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dummy_burst_filter_sptr self) -> std::string"""
        return _grgsm_swig.dummy_burst_filter_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dummy_burst_filter_sptr self, std::string name)"""
        return _grgsm_swig.dummy_burst_filter_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dummy_burst_filter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.dummy_burst_filter_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dummy_burst_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.dummy_burst_filter_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dummy_burst_filter_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.dummy_burst_filter_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dummy_burst_filter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.dummy_burst_filter_sptr_message_subscribers(self, which_port)

dummy_burst_filter_sptr_swigregister = _grgsm_swig.dummy_burst_filter_sptr_swigregister
dummy_burst_filter_sptr_swigregister(dummy_burst_filter_sptr)


dummy_burst_filter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dummy_burst_filter = dummy_burst_filter.make;

class bursts_printer(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(prepend_string, prepend_fnr=False, prepend_frame_count=False, print_payload_only=False, ignore_dummy_bursts=False):
        """
        make(swig_int_ptr prepend_string, bool prepend_fnr=False, bool prepend_frame_count=False, bool print_payload_only=False, bool ignore_dummy_bursts=False) -> bursts_printer_sptr

        Return a shared_ptr to a new instance of gsm::bursts_printer.

        To avoid accidental use of raw pointers, gsm::bursts_printer's constructor is in a private implementation class. gsm::bursts_printer::make is the public interface for creating new instances.

        Params: (prepend_string, prepend_fnr, prepend_frame_count, print_payload_only, ignore_dummy_bursts)
        """
        return _grgsm_swig.bursts_printer_make(prepend_string, prepend_fnr, prepend_frame_count, print_payload_only, ignore_dummy_bursts)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_bursts_printer
    __del__ = lambda self: None
bursts_printer_swigregister = _grgsm_swig.bursts_printer_swigregister
bursts_printer_swigregister(bursts_printer)

def bursts_printer_make(prepend_string, prepend_fnr=False, prepend_frame_count=False, print_payload_only=False, ignore_dummy_bursts=False):
    """
    bursts_printer_make(swig_int_ptr prepend_string, bool prepend_fnr=False, bool prepend_frame_count=False, bool print_payload_only=False, bool ignore_dummy_bursts=False) -> bursts_printer_sptr

    Return a shared_ptr to a new instance of gsm::bursts_printer.

    To avoid accidental use of raw pointers, gsm::bursts_printer's constructor is in a private implementation class. gsm::bursts_printer::make is the public interface for creating new instances.

    Params: (prepend_string, prepend_fnr, prepend_frame_count, print_payload_only, ignore_dummy_bursts)
    """
    return _grgsm_swig.bursts_printer_make(prepend_string, prepend_fnr, prepend_frame_count, print_payload_only, ignore_dummy_bursts)

class bursts_printer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::bursts_printer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::bursts_printer)> self) -> bursts_printer_sptr
        __init__(boost::shared_ptr<(gr::gsm::bursts_printer)> self, bursts_printer p) -> bursts_printer_sptr
        """
        this = _grgsm_swig.new_bursts_printer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(bursts_printer_sptr self) -> bursts_printer"""
        return _grgsm_swig.bursts_printer_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_bursts_printer_sptr
    __del__ = lambda self: None

    def make(self, prepend_string, prepend_fnr=False, prepend_frame_count=False, print_payload_only=False, ignore_dummy_bursts=False):
        """
        make(bursts_printer_sptr self, swig_int_ptr prepend_string, bool prepend_fnr=False, bool prepend_frame_count=False, bool print_payload_only=False, bool ignore_dummy_bursts=False) -> bursts_printer_sptr

        Return a shared_ptr to a new instance of gsm::bursts_printer.

        To avoid accidental use of raw pointers, gsm::bursts_printer's constructor is in a private implementation class. gsm::bursts_printer::make is the public interface for creating new instances.

        Params: (prepend_string, prepend_fnr, prepend_frame_count, print_payload_only, ignore_dummy_bursts)
        """
        return _grgsm_swig.bursts_printer_sptr_make(self, prepend_string, prepend_fnr, prepend_frame_count, print_payload_only, ignore_dummy_bursts)


    def history(self):
        """history(bursts_printer_sptr self) -> unsigned int"""
        return _grgsm_swig.bursts_printer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bursts_printer_sptr self, int which, int delay)
        declare_sample_delay(bursts_printer_sptr self, unsigned int delay)
        """
        return _grgsm_swig.bursts_printer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(bursts_printer_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.bursts_printer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(bursts_printer_sptr self) -> int"""
        return _grgsm_swig.bursts_printer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(bursts_printer_sptr self) -> double"""
        return _grgsm_swig.bursts_printer_sptr_relative_rate(self)


    def start(self):
        """start(bursts_printer_sptr self) -> bool"""
        return _grgsm_swig.bursts_printer_sptr_start(self)


    def stop(self):
        """stop(bursts_printer_sptr self) -> bool"""
        return _grgsm_swig.bursts_printer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(bursts_printer_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.bursts_printer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(bursts_printer_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.bursts_printer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(bursts_printer_sptr self) -> int"""
        return _grgsm_swig.bursts_printer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(bursts_printer_sptr self, int m)"""
        return _grgsm_swig.bursts_printer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bursts_printer_sptr self)"""
        return _grgsm_swig.bursts_printer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bursts_printer_sptr self) -> bool"""
        return _grgsm_swig.bursts_printer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(bursts_printer_sptr self, int m)"""
        return _grgsm_swig.bursts_printer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(bursts_printer_sptr self) -> int"""
        return _grgsm_swig.bursts_printer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(bursts_printer_sptr self, int i) -> long"""
        return _grgsm_swig.bursts_printer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bursts_printer_sptr self, long max_output_buffer)
        set_max_output_buffer(bursts_printer_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.bursts_printer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(bursts_printer_sptr self, int i) -> long"""
        return _grgsm_swig.bursts_printer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bursts_printer_sptr self, long min_output_buffer)
        set_min_output_buffer(bursts_printer_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.bursts_printer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bursts_printer_sptr self, int which) -> float
        pc_input_buffers_full(bursts_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.bursts_printer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bursts_printer_sptr self, int which) -> float
        pc_input_buffers_full_avg(bursts_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.bursts_printer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bursts_printer_sptr self, int which) -> float
        pc_input_buffers_full_var(bursts_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.bursts_printer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bursts_printer_sptr self, int which) -> float
        pc_output_buffers_full(bursts_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.bursts_printer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bursts_printer_sptr self, int which) -> float
        pc_output_buffers_full_avg(bursts_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.bursts_printer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bursts_printer_sptr self, int which) -> float
        pc_output_buffers_full_var(bursts_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.bursts_printer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(bursts_printer_sptr self) -> float"""
        return _grgsm_swig.bursts_printer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(bursts_printer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.bursts_printer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(bursts_printer_sptr self)"""
        return _grgsm_swig.bursts_printer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(bursts_printer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.bursts_printer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(bursts_printer_sptr self) -> int"""
        return _grgsm_swig.bursts_printer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(bursts_printer_sptr self) -> int"""
        return _grgsm_swig.bursts_printer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(bursts_printer_sptr self, int priority) -> int"""
        return _grgsm_swig.bursts_printer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(bursts_printer_sptr self) -> std::string"""
        return _grgsm_swig.bursts_printer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(bursts_printer_sptr self) -> std::string"""
        return _grgsm_swig.bursts_printer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(bursts_printer_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.bursts_printer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(bursts_printer_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.bursts_printer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(bursts_printer_sptr self) -> long"""
        return _grgsm_swig.bursts_printer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(bursts_printer_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.bursts_printer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(bursts_printer_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.bursts_printer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(bursts_printer_sptr self) -> std::string"""
        return _grgsm_swig.bursts_printer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(bursts_printer_sptr self, std::string name)"""
        return _grgsm_swig.bursts_printer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(bursts_printer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.bursts_printer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(bursts_printer_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.bursts_printer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(bursts_printer_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.bursts_printer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(bursts_printer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.bursts_printer_sptr_message_subscribers(self, which_port)

bursts_printer_sptr_swigregister = _grgsm_swig.bursts_printer_sptr_swigregister
bursts_printer_sptr_swigregister(bursts_printer_sptr)


bursts_printer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bursts_printer = bursts_printer.make;

class burst_file_sink(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(filename):
        """
        make(std::string const & filename) -> burst_file_sink_sptr

        Return a shared_ptr to a new instance of grgsm::burst_file_sink.

        To avoid accidental use of raw pointers, grgsm::burst_file_sink's constructor is in a private implementation class. grgsm::burst_file_sink::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.burst_file_sink_make(filename)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_file_sink
    __del__ = lambda self: None
burst_file_sink_swigregister = _grgsm_swig.burst_file_sink_swigregister
burst_file_sink_swigregister(burst_file_sink)

def burst_file_sink_make(filename):
    """
    burst_file_sink_make(std::string const & filename) -> burst_file_sink_sptr

    Return a shared_ptr to a new instance of grgsm::burst_file_sink.

    To avoid accidental use of raw pointers, grgsm::burst_file_sink's constructor is in a private implementation class. grgsm::burst_file_sink::make is the public interface for creating new instances.

    Params: (filename)
    """
    return _grgsm_swig.burst_file_sink_make(filename)

class burst_file_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_file_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_file_sink)> self) -> burst_file_sink_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_file_sink)> self, burst_file_sink p) -> burst_file_sink_sptr
        """
        this = _grgsm_swig.new_burst_file_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_file_sink_sptr self) -> burst_file_sink"""
        return _grgsm_swig.burst_file_sink_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_file_sink_sptr
    __del__ = lambda self: None

    def make(self, filename):
        """
        make(burst_file_sink_sptr self, std::string const & filename) -> burst_file_sink_sptr

        Return a shared_ptr to a new instance of grgsm::burst_file_sink.

        To avoid accidental use of raw pointers, grgsm::burst_file_sink's constructor is in a private implementation class. grgsm::burst_file_sink::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.burst_file_sink_sptr_make(self, filename)


    def history(self):
        """history(burst_file_sink_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_file_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_file_sink_sptr self, int which, int delay)
        declare_sample_delay(burst_file_sink_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_file_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_file_sink_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_file_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_file_sink_sptr self) -> int"""
        return _grgsm_swig.burst_file_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_file_sink_sptr self) -> double"""
        return _grgsm_swig.burst_file_sink_sptr_relative_rate(self)


    def start(self):
        """start(burst_file_sink_sptr self) -> bool"""
        return _grgsm_swig.burst_file_sink_sptr_start(self)


    def stop(self):
        """stop(burst_file_sink_sptr self) -> bool"""
        return _grgsm_swig.burst_file_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_file_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_file_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_file_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_file_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_file_sink_sptr self) -> int"""
        return _grgsm_swig.burst_file_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_file_sink_sptr self, int m)"""
        return _grgsm_swig.burst_file_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_file_sink_sptr self)"""
        return _grgsm_swig.burst_file_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_file_sink_sptr self) -> bool"""
        return _grgsm_swig.burst_file_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_file_sink_sptr self, int m)"""
        return _grgsm_swig.burst_file_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_file_sink_sptr self) -> int"""
        return _grgsm_swig.burst_file_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_file_sink_sptr self, int i) -> long"""
        return _grgsm_swig.burst_file_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_file_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_file_sink_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_file_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_file_sink_sptr self, int i) -> long"""
        return _grgsm_swig.burst_file_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_file_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_file_sink_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_file_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_file_sink_sptr self, int which) -> float
        pc_input_buffers_full(burst_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_file_sink_sptr self, int which) -> float
        pc_output_buffers_full(burst_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_file_sink_sptr self) -> float"""
        return _grgsm_swig.burst_file_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_file_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_file_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_file_sink_sptr self)"""
        return _grgsm_swig.burst_file_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_file_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_file_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_file_sink_sptr self) -> int"""
        return _grgsm_swig.burst_file_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_file_sink_sptr self) -> int"""
        return _grgsm_swig.burst_file_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_file_sink_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_file_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_file_sink_sptr self) -> std::string"""
        return _grgsm_swig.burst_file_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_file_sink_sptr self) -> std::string"""
        return _grgsm_swig.burst_file_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_file_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_file_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_file_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_file_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_file_sink_sptr self) -> long"""
        return _grgsm_swig.burst_file_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_file_sink_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_file_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_file_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_file_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_file_sink_sptr self) -> std::string"""
        return _grgsm_swig.burst_file_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_file_sink_sptr self, std::string name)"""
        return _grgsm_swig.burst_file_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_file_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_file_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_file_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_file_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_file_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_file_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_file_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_file_sink_sptr_message_subscribers(self, which_port)

burst_file_sink_sptr_swigregister = _grgsm_swig.burst_file_sink_sptr_swigregister
burst_file_sink_sptr_swigregister(burst_file_sink_sptr)


burst_file_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_file_sink = burst_file_sink.make;

class burst_file_source(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(filename):
        """
        make(std::string const & filename) -> burst_file_source_sptr

        Return a shared_ptr to a new instance of grgsm::burst_file_source.

        To avoid accidental use of raw pointers, grgsm::burst_file_source's constructor is in a private implementation class. grgsm::burst_file_source::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.burst_file_source_make(filename)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_burst_file_source
    __del__ = lambda self: None
burst_file_source_swigregister = _grgsm_swig.burst_file_source_swigregister
burst_file_source_swigregister(burst_file_source)

def burst_file_source_make(filename):
    """
    burst_file_source_make(std::string const & filename) -> burst_file_source_sptr

    Return a shared_ptr to a new instance of grgsm::burst_file_source.

    To avoid accidental use of raw pointers, grgsm::burst_file_source's constructor is in a private implementation class. grgsm::burst_file_source::make is the public interface for creating new instances.

    Params: (filename)
    """
    return _grgsm_swig.burst_file_source_make(filename)

class burst_file_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_file_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_file_source)> self) -> burst_file_source_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_file_source)> self, burst_file_source p) -> burst_file_source_sptr
        """
        this = _grgsm_swig.new_burst_file_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_file_source_sptr self) -> burst_file_source"""
        return _grgsm_swig.burst_file_source_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_file_source_sptr
    __del__ = lambda self: None

    def make(self, filename):
        """
        make(burst_file_source_sptr self, std::string const & filename) -> burst_file_source_sptr

        Return a shared_ptr to a new instance of grgsm::burst_file_source.

        To avoid accidental use of raw pointers, grgsm::burst_file_source's constructor is in a private implementation class. grgsm::burst_file_source::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.burst_file_source_sptr_make(self, filename)


    def history(self):
        """history(burst_file_source_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_file_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_file_source_sptr self, int which, int delay)
        declare_sample_delay(burst_file_source_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_file_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_file_source_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_file_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_file_source_sptr self) -> int"""
        return _grgsm_swig.burst_file_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_file_source_sptr self) -> double"""
        return _grgsm_swig.burst_file_source_sptr_relative_rate(self)


    def start(self):
        """start(burst_file_source_sptr self) -> bool"""
        return _grgsm_swig.burst_file_source_sptr_start(self)


    def stop(self):
        """stop(burst_file_source_sptr self) -> bool"""
        return _grgsm_swig.burst_file_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_file_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_file_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_file_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_file_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_file_source_sptr self) -> int"""
        return _grgsm_swig.burst_file_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_file_source_sptr self, int m)"""
        return _grgsm_swig.burst_file_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_file_source_sptr self)"""
        return _grgsm_swig.burst_file_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_file_source_sptr self) -> bool"""
        return _grgsm_swig.burst_file_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_file_source_sptr self, int m)"""
        return _grgsm_swig.burst_file_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_file_source_sptr self) -> int"""
        return _grgsm_swig.burst_file_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_file_source_sptr self, int i) -> long"""
        return _grgsm_swig.burst_file_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_file_source_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_file_source_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_file_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_file_source_sptr self, int i) -> long"""
        return _grgsm_swig.burst_file_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_file_source_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_file_source_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_file_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_file_source_sptr self, int which) -> float
        pc_input_buffers_full(burst_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_file_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_file_source_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_file_source_sptr self, int which) -> float
        pc_output_buffers_full(burst_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_file_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_file_source_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_file_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_file_source_sptr self) -> float"""
        return _grgsm_swig.burst_file_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_file_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_file_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_file_source_sptr self)"""
        return _grgsm_swig.burst_file_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_file_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_file_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_file_source_sptr self) -> int"""
        return _grgsm_swig.burst_file_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_file_source_sptr self) -> int"""
        return _grgsm_swig.burst_file_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_file_source_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_file_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_file_source_sptr self) -> std::string"""
        return _grgsm_swig.burst_file_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_file_source_sptr self) -> std::string"""
        return _grgsm_swig.burst_file_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_file_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_file_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_file_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_file_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_file_source_sptr self) -> long"""
        return _grgsm_swig.burst_file_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_file_source_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_file_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_file_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_file_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_file_source_sptr self) -> std::string"""
        return _grgsm_swig.burst_file_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_file_source_sptr self, std::string name)"""
        return _grgsm_swig.burst_file_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_file_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_file_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_file_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_file_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_file_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_file_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_file_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_file_source_sptr_message_subscribers(self, which_port)

burst_file_source_sptr_swigregister = _grgsm_swig.burst_file_source_sptr_swigregister
burst_file_source_sptr_swigregister(burst_file_source_sptr)


burst_file_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_file_source = burst_file_source.make;

class extract_system_info(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """
        make() -> extract_system_info_sptr

        Return a shared_ptr to a new instance of gsm::extract_system_info.

        To avoid accidental use of raw pointers, gsm::extract_system_info's constructor is in a private implementation class. gsm::extract_system_info::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_make()

    make = staticmethod(make)

    def get_chans(self):
        """
        get_chans(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_chans(self)


    def get_pwrs(self):
        """
        get_pwrs(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_pwrs(self)


    def get_lac(self):
        """
        get_lac(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_lac(self)


    def get_cell_id(self):
        """
        get_cell_id(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_cell_id(self)


    def get_mcc(self):
        """
        get_mcc(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_mcc(self)


    def get_mnc(self):
        """
        get_mnc(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_mnc(self)


    def get_ccch_conf(self):
        """
        get_ccch_conf(extract_system_info self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_get_ccch_conf(self)


    def get_cell_arfcns(self, chan_id):
        """
        get_cell_arfcns(extract_system_info self, int chan_id) -> std::vector< int,std::allocator< int > >



        Params: (chan_id)
        """
        return _grgsm_swig.extract_system_info_get_cell_arfcns(self, chan_id)


    def get_neighbours(self, chan_id):
        """
        get_neighbours(extract_system_info self, int chan_id) -> std::vector< int,std::allocator< int > >



        Params: (chan_id)
        """
        return _grgsm_swig.extract_system_info_get_neighbours(self, chan_id)


    def reset(self):
        """
        reset(extract_system_info self)



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_reset(self)

    __swig_destroy__ = _grgsm_swig.delete_extract_system_info
    __del__ = lambda self: None
extract_system_info_swigregister = _grgsm_swig.extract_system_info_swigregister
extract_system_info_swigregister(extract_system_info)

def extract_system_info_make():
    """
    extract_system_info_make() -> extract_system_info_sptr

    Return a shared_ptr to a new instance of gsm::extract_system_info.

    To avoid accidental use of raw pointers, gsm::extract_system_info's constructor is in a private implementation class. gsm::extract_system_info::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.extract_system_info_make()

class extract_system_info_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::extract_system_info)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::extract_system_info)> self) -> extract_system_info_sptr
        __init__(boost::shared_ptr<(gr::gsm::extract_system_info)> self, extract_system_info p) -> extract_system_info_sptr
        """
        this = _grgsm_swig.new_extract_system_info_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(extract_system_info_sptr self) -> extract_system_info"""
        return _grgsm_swig.extract_system_info_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_extract_system_info_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(extract_system_info_sptr self) -> extract_system_info_sptr

        Return a shared_ptr to a new instance of gsm::extract_system_info.

        To avoid accidental use of raw pointers, gsm::extract_system_info's constructor is in a private implementation class. gsm::extract_system_info::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_make(self)


    def get_chans(self):
        """
        get_chans(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_chans(self)


    def get_pwrs(self):
        """
        get_pwrs(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_pwrs(self)


    def get_lac(self):
        """
        get_lac(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_lac(self)


    def get_cell_id(self):
        """
        get_cell_id(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_cell_id(self)


    def get_mcc(self):
        """
        get_mcc(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_mcc(self)


    def get_mnc(self):
        """
        get_mnc(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_mnc(self)


    def get_ccch_conf(self):
        """
        get_ccch_conf(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_get_ccch_conf(self)


    def get_cell_arfcns(self, chan_id):
        """
        get_cell_arfcns(extract_system_info_sptr self, int chan_id) -> std::vector< int,std::allocator< int > >



        Params: (chan_id)
        """
        return _grgsm_swig.extract_system_info_sptr_get_cell_arfcns(self, chan_id)


    def get_neighbours(self, chan_id):
        """
        get_neighbours(extract_system_info_sptr self, int chan_id) -> std::vector< int,std::allocator< int > >



        Params: (chan_id)
        """
        return _grgsm_swig.extract_system_info_sptr_get_neighbours(self, chan_id)


    def reset(self):
        """
        reset(extract_system_info_sptr self)



        Params: (NONE)
        """
        return _grgsm_swig.extract_system_info_sptr_reset(self)


    def history(self):
        """history(extract_system_info_sptr self) -> unsigned int"""
        return _grgsm_swig.extract_system_info_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(extract_system_info_sptr self, int which, int delay)
        declare_sample_delay(extract_system_info_sptr self, unsigned int delay)
        """
        return _grgsm_swig.extract_system_info_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(extract_system_info_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.extract_system_info_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(extract_system_info_sptr self) -> int"""
        return _grgsm_swig.extract_system_info_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(extract_system_info_sptr self) -> double"""
        return _grgsm_swig.extract_system_info_sptr_relative_rate(self)


    def start(self):
        """start(extract_system_info_sptr self) -> bool"""
        return _grgsm_swig.extract_system_info_sptr_start(self)


    def stop(self):
        """stop(extract_system_info_sptr self) -> bool"""
        return _grgsm_swig.extract_system_info_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(extract_system_info_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.extract_system_info_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(extract_system_info_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.extract_system_info_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(extract_system_info_sptr self) -> int"""
        return _grgsm_swig.extract_system_info_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(extract_system_info_sptr self, int m)"""
        return _grgsm_swig.extract_system_info_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(extract_system_info_sptr self)"""
        return _grgsm_swig.extract_system_info_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(extract_system_info_sptr self) -> bool"""
        return _grgsm_swig.extract_system_info_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(extract_system_info_sptr self, int m)"""
        return _grgsm_swig.extract_system_info_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(extract_system_info_sptr self) -> int"""
        return _grgsm_swig.extract_system_info_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(extract_system_info_sptr self, int i) -> long"""
        return _grgsm_swig.extract_system_info_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(extract_system_info_sptr self, long max_output_buffer)
        set_max_output_buffer(extract_system_info_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.extract_system_info_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(extract_system_info_sptr self, int i) -> long"""
        return _grgsm_swig.extract_system_info_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(extract_system_info_sptr self, long min_output_buffer)
        set_min_output_buffer(extract_system_info_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.extract_system_info_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(extract_system_info_sptr self, int which) -> float
        pc_input_buffers_full(extract_system_info_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_system_info_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(extract_system_info_sptr self, int which) -> float
        pc_input_buffers_full_avg(extract_system_info_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_system_info_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(extract_system_info_sptr self, int which) -> float
        pc_input_buffers_full_var(extract_system_info_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_system_info_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(extract_system_info_sptr self, int which) -> float
        pc_output_buffers_full(extract_system_info_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_system_info_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(extract_system_info_sptr self, int which) -> float
        pc_output_buffers_full_avg(extract_system_info_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_system_info_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(extract_system_info_sptr self, int which) -> float
        pc_output_buffers_full_var(extract_system_info_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_system_info_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(extract_system_info_sptr self) -> float"""
        return _grgsm_swig.extract_system_info_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(extract_system_info_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.extract_system_info_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(extract_system_info_sptr self)"""
        return _grgsm_swig.extract_system_info_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(extract_system_info_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.extract_system_info_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(extract_system_info_sptr self) -> int"""
        return _grgsm_swig.extract_system_info_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(extract_system_info_sptr self) -> int"""
        return _grgsm_swig.extract_system_info_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(extract_system_info_sptr self, int priority) -> int"""
        return _grgsm_swig.extract_system_info_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(extract_system_info_sptr self) -> std::string"""
        return _grgsm_swig.extract_system_info_sptr_name(self)


    def symbol_name(self):
        """symbol_name(extract_system_info_sptr self) -> std::string"""
        return _grgsm_swig.extract_system_info_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(extract_system_info_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.extract_system_info_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(extract_system_info_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.extract_system_info_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(extract_system_info_sptr self) -> long"""
        return _grgsm_swig.extract_system_info_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(extract_system_info_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.extract_system_info_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(extract_system_info_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.extract_system_info_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(extract_system_info_sptr self) -> std::string"""
        return _grgsm_swig.extract_system_info_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(extract_system_info_sptr self, std::string name)"""
        return _grgsm_swig.extract_system_info_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(extract_system_info_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.extract_system_info_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(extract_system_info_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.extract_system_info_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(extract_system_info_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.extract_system_info_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(extract_system_info_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.extract_system_info_sptr_message_subscribers(self, which_port)

extract_system_info_sptr_swigregister = _grgsm_swig.extract_system_info_sptr_swigregister
extract_system_info_sptr_swigregister(extract_system_info_sptr)


extract_system_info_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
extract_system_info = extract_system_info.make;

class extract_immediate_assignment(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(print_immediate_assignments=False, ignore_gprs=False, unique_references=False):
        """
        make(bool print_immediate_assignments=False, bool ignore_gprs=False, bool unique_references=False) -> extract_immediate_assignment_sptr

        Return a shared_ptr to a new instance of gsm::extract_immediate_assignment.

        To avoid accidental use of raw pointers, gsm::extract_immediate_assignment's constructor is in a private implementation class. gsm::extract_immediate_assignment::make is the public interface for creating new instances.

        Params: (print_immediate_assignments, ignore_gprs, unique_references)
        """
        return _grgsm_swig.extract_immediate_assignment_make(print_immediate_assignments, ignore_gprs, unique_references)

    make = staticmethod(make)

    def get_frame_numbers(self):
        """
        get_frame_numbers(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_frame_numbers(self)


    def get_channel_types(self):
        """
        get_channel_types(extract_immediate_assignment self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_channel_types(self)


    def get_timeslots(self):
        """
        get_timeslots(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_timeslots(self)


    def get_subchannels(self):
        """
        get_subchannels(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_subchannels(self)


    def get_hopping(self):
        """
        get_hopping(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_hopping(self)


    def get_maios(self):
        """
        get_maios(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_maios(self)


    def get_hsns(self):
        """
        get_hsns(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_hsns(self)


    def get_arfcns(self):
        """
        get_arfcns(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_arfcns(self)


    def get_timing_advances(self):
        """
        get_timing_advances(extract_immediate_assignment self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_timing_advances(self)


    def get_mobile_allocations(self):
        """
        get_mobile_allocations(extract_immediate_assignment self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_get_mobile_allocations(self)

    __swig_destroy__ = _grgsm_swig.delete_extract_immediate_assignment
    __del__ = lambda self: None
extract_immediate_assignment_swigregister = _grgsm_swig.extract_immediate_assignment_swigregister
extract_immediate_assignment_swigregister(extract_immediate_assignment)

def extract_immediate_assignment_make(print_immediate_assignments=False, ignore_gprs=False, unique_references=False):
    """
    extract_immediate_assignment_make(bool print_immediate_assignments=False, bool ignore_gprs=False, bool unique_references=False) -> extract_immediate_assignment_sptr

    Return a shared_ptr to a new instance of gsm::extract_immediate_assignment.

    To avoid accidental use of raw pointers, gsm::extract_immediate_assignment's constructor is in a private implementation class. gsm::extract_immediate_assignment::make is the public interface for creating new instances.

    Params: (print_immediate_assignments, ignore_gprs, unique_references)
    """
    return _grgsm_swig.extract_immediate_assignment_make(print_immediate_assignments, ignore_gprs, unique_references)

class extract_immediate_assignment_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::extract_immediate_assignment)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::extract_immediate_assignment)> self) -> extract_immediate_assignment_sptr
        __init__(boost::shared_ptr<(gr::gsm::extract_immediate_assignment)> self, extract_immediate_assignment p) -> extract_immediate_assignment_sptr
        """
        this = _grgsm_swig.new_extract_immediate_assignment_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(extract_immediate_assignment_sptr self) -> extract_immediate_assignment"""
        return _grgsm_swig.extract_immediate_assignment_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_extract_immediate_assignment_sptr
    __del__ = lambda self: None

    def make(self, print_immediate_assignments=False, ignore_gprs=False, unique_references=False):
        """
        make(extract_immediate_assignment_sptr self, bool print_immediate_assignments=False, bool ignore_gprs=False, bool unique_references=False) -> extract_immediate_assignment_sptr

        Return a shared_ptr to a new instance of gsm::extract_immediate_assignment.

        To avoid accidental use of raw pointers, gsm::extract_immediate_assignment's constructor is in a private implementation class. gsm::extract_immediate_assignment::make is the public interface for creating new instances.

        Params: (print_immediate_assignments, ignore_gprs, unique_references)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_make(self, print_immediate_assignments, ignore_gprs, unique_references)


    def get_frame_numbers(self):
        """
        get_frame_numbers(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_frame_numbers(self)


    def get_channel_types(self):
        """
        get_channel_types(extract_immediate_assignment_sptr self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_channel_types(self)


    def get_timeslots(self):
        """
        get_timeslots(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_timeslots(self)


    def get_subchannels(self):
        """
        get_subchannels(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_subchannels(self)


    def get_hopping(self):
        """
        get_hopping(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_hopping(self)


    def get_maios(self):
        """
        get_maios(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_maios(self)


    def get_hsns(self):
        """
        get_hsns(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_hsns(self)


    def get_arfcns(self):
        """
        get_arfcns(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_arfcns(self)


    def get_timing_advances(self):
        """
        get_timing_advances(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_timing_advances(self)


    def get_mobile_allocations(self):
        """
        get_mobile_allocations(extract_immediate_assignment_sptr self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_get_mobile_allocations(self)


    def history(self):
        """history(extract_immediate_assignment_sptr self) -> unsigned int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(extract_immediate_assignment_sptr self, int which, int delay)
        declare_sample_delay(extract_immediate_assignment_sptr self, unsigned int delay)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(extract_immediate_assignment_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(extract_immediate_assignment_sptr self) -> int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(extract_immediate_assignment_sptr self) -> double"""
        return _grgsm_swig.extract_immediate_assignment_sptr_relative_rate(self)


    def start(self):
        """start(extract_immediate_assignment_sptr self) -> bool"""
        return _grgsm_swig.extract_immediate_assignment_sptr_start(self)


    def stop(self):
        """stop(extract_immediate_assignment_sptr self) -> bool"""
        return _grgsm_swig.extract_immediate_assignment_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(extract_immediate_assignment_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.extract_immediate_assignment_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(extract_immediate_assignment_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.extract_immediate_assignment_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(extract_immediate_assignment_sptr self) -> int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(extract_immediate_assignment_sptr self, int m)"""
        return _grgsm_swig.extract_immediate_assignment_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(extract_immediate_assignment_sptr self)"""
        return _grgsm_swig.extract_immediate_assignment_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(extract_immediate_assignment_sptr self) -> bool"""
        return _grgsm_swig.extract_immediate_assignment_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(extract_immediate_assignment_sptr self, int m)"""
        return _grgsm_swig.extract_immediate_assignment_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(extract_immediate_assignment_sptr self) -> int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(extract_immediate_assignment_sptr self, int i) -> long"""
        return _grgsm_swig.extract_immediate_assignment_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(extract_immediate_assignment_sptr self, long max_output_buffer)
        set_max_output_buffer(extract_immediate_assignment_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(extract_immediate_assignment_sptr self, int i) -> long"""
        return _grgsm_swig.extract_immediate_assignment_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(extract_immediate_assignment_sptr self, long min_output_buffer)
        set_min_output_buffer(extract_immediate_assignment_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(extract_immediate_assignment_sptr self, int which) -> float
        pc_input_buffers_full(extract_immediate_assignment_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(extract_immediate_assignment_sptr self, int which) -> float
        pc_input_buffers_full_avg(extract_immediate_assignment_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(extract_immediate_assignment_sptr self, int which) -> float
        pc_input_buffers_full_var(extract_immediate_assignment_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(extract_immediate_assignment_sptr self, int which) -> float
        pc_output_buffers_full(extract_immediate_assignment_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(extract_immediate_assignment_sptr self, int which) -> float
        pc_output_buffers_full_avg(extract_immediate_assignment_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(extract_immediate_assignment_sptr self, int which) -> float
        pc_output_buffers_full_var(extract_immediate_assignment_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(extract_immediate_assignment_sptr self) -> float"""
        return _grgsm_swig.extract_immediate_assignment_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(extract_immediate_assignment_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.extract_immediate_assignment_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(extract_immediate_assignment_sptr self)"""
        return _grgsm_swig.extract_immediate_assignment_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(extract_immediate_assignment_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.extract_immediate_assignment_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(extract_immediate_assignment_sptr self) -> int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(extract_immediate_assignment_sptr self) -> int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(extract_immediate_assignment_sptr self, int priority) -> int"""
        return _grgsm_swig.extract_immediate_assignment_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(extract_immediate_assignment_sptr self) -> std::string"""
        return _grgsm_swig.extract_immediate_assignment_sptr_name(self)


    def symbol_name(self):
        """symbol_name(extract_immediate_assignment_sptr self) -> std::string"""
        return _grgsm_swig.extract_immediate_assignment_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(extract_immediate_assignment_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.extract_immediate_assignment_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(extract_immediate_assignment_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.extract_immediate_assignment_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(extract_immediate_assignment_sptr self) -> long"""
        return _grgsm_swig.extract_immediate_assignment_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(extract_immediate_assignment_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.extract_immediate_assignment_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(extract_immediate_assignment_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.extract_immediate_assignment_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(extract_immediate_assignment_sptr self) -> std::string"""
        return _grgsm_swig.extract_immediate_assignment_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(extract_immediate_assignment_sptr self, std::string name)"""
        return _grgsm_swig.extract_immediate_assignment_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(extract_immediate_assignment_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.extract_immediate_assignment_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(extract_immediate_assignment_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.extract_immediate_assignment_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(extract_immediate_assignment_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.extract_immediate_assignment_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(extract_immediate_assignment_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.extract_immediate_assignment_sptr_message_subscribers(self, which_port)

extract_immediate_assignment_sptr_swigregister = _grgsm_swig.extract_immediate_assignment_sptr_swigregister
extract_immediate_assignment_sptr_swigregister(extract_immediate_assignment_sptr)


extract_immediate_assignment_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
extract_immediate_assignment = extract_immediate_assignment.make;

class controlled_rotator_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(phase_inc, samp_rate):
        """
        make(double phase_inc, double samp_rate) -> controlled_rotator_cc_sptr

        Return a shared_ptr to a new instance of gsm::controlled_rotator_cc.

        To avoid accidental use of raw pointers, gsm::controlled_rotator_cc's constructor is in a private implementation class. gsm::controlled_rotator_cc::make is the public interface for creating new instances.

        Params: (phase_inc, samp_rate)
        """
        return _grgsm_swig.controlled_rotator_cc_make(phase_inc, samp_rate)

    make = staticmethod(make)

    def set_phase_inc(self, phase_inc):
        """
        set_phase_inc(controlled_rotator_cc self, double phase_inc)



        Params: (phase_inc)
        """
        return _grgsm_swig.controlled_rotator_cc_set_phase_inc(self, phase_inc)


    def set_samp_rate(self, samp_rate):
        """
        set_samp_rate(controlled_rotator_cc self, double samp_rate)



        Params: (samp_rate)
        """
        return _grgsm_swig.controlled_rotator_cc_set_samp_rate(self, samp_rate)

    __swig_destroy__ = _grgsm_swig.delete_controlled_rotator_cc
    __del__ = lambda self: None
controlled_rotator_cc_swigregister = _grgsm_swig.controlled_rotator_cc_swigregister
controlled_rotator_cc_swigregister(controlled_rotator_cc)

def controlled_rotator_cc_make(phase_inc, samp_rate):
    """
    controlled_rotator_cc_make(double phase_inc, double samp_rate) -> controlled_rotator_cc_sptr

    Return a shared_ptr to a new instance of gsm::controlled_rotator_cc.

    To avoid accidental use of raw pointers, gsm::controlled_rotator_cc's constructor is in a private implementation class. gsm::controlled_rotator_cc::make is the public interface for creating new instances.

    Params: (phase_inc, samp_rate)
    """
    return _grgsm_swig.controlled_rotator_cc_make(phase_inc, samp_rate)

class controlled_rotator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::controlled_rotator_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::controlled_rotator_cc)> self) -> controlled_rotator_cc_sptr
        __init__(boost::shared_ptr<(gr::gsm::controlled_rotator_cc)> self, controlled_rotator_cc p) -> controlled_rotator_cc_sptr
        """
        this = _grgsm_swig.new_controlled_rotator_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(controlled_rotator_cc_sptr self) -> controlled_rotator_cc"""
        return _grgsm_swig.controlled_rotator_cc_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_controlled_rotator_cc_sptr
    __del__ = lambda self: None

    def make(self, phase_inc, samp_rate):
        """
        make(controlled_rotator_cc_sptr self, double phase_inc, double samp_rate) -> controlled_rotator_cc_sptr

        Return a shared_ptr to a new instance of gsm::controlled_rotator_cc.

        To avoid accidental use of raw pointers, gsm::controlled_rotator_cc's constructor is in a private implementation class. gsm::controlled_rotator_cc::make is the public interface for creating new instances.

        Params: (phase_inc, samp_rate)
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_make(self, phase_inc, samp_rate)


    def set_phase_inc(self, phase_inc):
        """
        set_phase_inc(controlled_rotator_cc_sptr self, double phase_inc)



        Params: (phase_inc)
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_set_phase_inc(self, phase_inc)


    def set_samp_rate(self, samp_rate):
        """
        set_samp_rate(controlled_rotator_cc_sptr self, double samp_rate)



        Params: (samp_rate)
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_set_samp_rate(self, samp_rate)


    def history(self):
        """history(controlled_rotator_cc_sptr self) -> unsigned int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(controlled_rotator_cc_sptr self, int which, int delay)
        declare_sample_delay(controlled_rotator_cc_sptr self, unsigned int delay)
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(controlled_rotator_cc_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(controlled_rotator_cc_sptr self) -> int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(controlled_rotator_cc_sptr self) -> double"""
        return _grgsm_swig.controlled_rotator_cc_sptr_relative_rate(self)


    def start(self):
        """start(controlled_rotator_cc_sptr self) -> bool"""
        return _grgsm_swig.controlled_rotator_cc_sptr_start(self)


    def stop(self):
        """stop(controlled_rotator_cc_sptr self) -> bool"""
        return _grgsm_swig.controlled_rotator_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(controlled_rotator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.controlled_rotator_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(controlled_rotator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.controlled_rotator_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(controlled_rotator_cc_sptr self) -> int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(controlled_rotator_cc_sptr self, int m)"""
        return _grgsm_swig.controlled_rotator_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(controlled_rotator_cc_sptr self)"""
        return _grgsm_swig.controlled_rotator_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(controlled_rotator_cc_sptr self) -> bool"""
        return _grgsm_swig.controlled_rotator_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(controlled_rotator_cc_sptr self, int m)"""
        return _grgsm_swig.controlled_rotator_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(controlled_rotator_cc_sptr self) -> int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(controlled_rotator_cc_sptr self, int i) -> long"""
        return _grgsm_swig.controlled_rotator_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(controlled_rotator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(controlled_rotator_cc_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(controlled_rotator_cc_sptr self, int i) -> long"""
        return _grgsm_swig.controlled_rotator_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(controlled_rotator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(controlled_rotator_cc_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(controlled_rotator_cc_sptr self, int which) -> float
        pc_input_buffers_full(controlled_rotator_cc_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(controlled_rotator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(controlled_rotator_cc_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(controlled_rotator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(controlled_rotator_cc_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(controlled_rotator_cc_sptr self, int which) -> float
        pc_output_buffers_full(controlled_rotator_cc_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(controlled_rotator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(controlled_rotator_cc_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(controlled_rotator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(controlled_rotator_cc_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(controlled_rotator_cc_sptr self) -> float"""
        return _grgsm_swig.controlled_rotator_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(controlled_rotator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.controlled_rotator_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(controlled_rotator_cc_sptr self)"""
        return _grgsm_swig.controlled_rotator_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(controlled_rotator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.controlled_rotator_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(controlled_rotator_cc_sptr self) -> int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(controlled_rotator_cc_sptr self) -> int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(controlled_rotator_cc_sptr self, int priority) -> int"""
        return _grgsm_swig.controlled_rotator_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(controlled_rotator_cc_sptr self) -> std::string"""
        return _grgsm_swig.controlled_rotator_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(controlled_rotator_cc_sptr self) -> std::string"""
        return _grgsm_swig.controlled_rotator_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(controlled_rotator_cc_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.controlled_rotator_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(controlled_rotator_cc_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.controlled_rotator_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(controlled_rotator_cc_sptr self) -> long"""
        return _grgsm_swig.controlled_rotator_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(controlled_rotator_cc_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.controlled_rotator_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(controlled_rotator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.controlled_rotator_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(controlled_rotator_cc_sptr self) -> std::string"""
        return _grgsm_swig.controlled_rotator_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(controlled_rotator_cc_sptr self, std::string name)"""
        return _grgsm_swig.controlled_rotator_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(controlled_rotator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.controlled_rotator_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(controlled_rotator_cc_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.controlled_rotator_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(controlled_rotator_cc_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.controlled_rotator_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(controlled_rotator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.controlled_rotator_cc_sptr_message_subscribers(self, which_port)

controlled_rotator_cc_sptr_swigregister = _grgsm_swig.controlled_rotator_cc_sptr_swigregister
controlled_rotator_cc_sptr_swigregister(controlled_rotator_cc_sptr)


controlled_rotator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
controlled_rotator_cc = controlled_rotator_cc.make;

class controlled_const_source_f(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(constant):
        """
        make(float constant) -> controlled_const_source_f_sptr

        Return a shared_ptr to a new instance of gsm::controlled_const_source_f.

        To avoid accidental use of raw pointers, gsm::controlled_const_source_f's constructor is in a private implementation class. gsm::controlled_const_source_f::make is the public interface for creating new instances.

        Params: (constant)
        """
        return _grgsm_swig.controlled_const_source_f_make(constant)

    make = staticmethod(make)

    def set_constant(self, constant):
        """
        set_constant(controlled_const_source_f self, float constant)



        Params: (constant)
        """
        return _grgsm_swig.controlled_const_source_f_set_constant(self, constant)

    __swig_destroy__ = _grgsm_swig.delete_controlled_const_source_f
    __del__ = lambda self: None
controlled_const_source_f_swigregister = _grgsm_swig.controlled_const_source_f_swigregister
controlled_const_source_f_swigregister(controlled_const_source_f)

def controlled_const_source_f_make(constant):
    """
    controlled_const_source_f_make(float constant) -> controlled_const_source_f_sptr

    Return a shared_ptr to a new instance of gsm::controlled_const_source_f.

    To avoid accidental use of raw pointers, gsm::controlled_const_source_f's constructor is in a private implementation class. gsm::controlled_const_source_f::make is the public interface for creating new instances.

    Params: (constant)
    """
    return _grgsm_swig.controlled_const_source_f_make(constant)

class controlled_const_source_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::controlled_const_source_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::controlled_const_source_f)> self) -> controlled_const_source_f_sptr
        __init__(boost::shared_ptr<(gr::gsm::controlled_const_source_f)> self, controlled_const_source_f p) -> controlled_const_source_f_sptr
        """
        this = _grgsm_swig.new_controlled_const_source_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(controlled_const_source_f_sptr self) -> controlled_const_source_f"""
        return _grgsm_swig.controlled_const_source_f_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_controlled_const_source_f_sptr
    __del__ = lambda self: None

    def make(self, constant):
        """
        make(controlled_const_source_f_sptr self, float constant) -> controlled_const_source_f_sptr

        Return a shared_ptr to a new instance of gsm::controlled_const_source_f.

        To avoid accidental use of raw pointers, gsm::controlled_const_source_f's constructor is in a private implementation class. gsm::controlled_const_source_f::make is the public interface for creating new instances.

        Params: (constant)
        """
        return _grgsm_swig.controlled_const_source_f_sptr_make(self, constant)


    def set_constant(self, constant):
        """
        set_constant(controlled_const_source_f_sptr self, float constant)



        Params: (constant)
        """
        return _grgsm_swig.controlled_const_source_f_sptr_set_constant(self, constant)


    def history(self):
        """history(controlled_const_source_f_sptr self) -> unsigned int"""
        return _grgsm_swig.controlled_const_source_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(controlled_const_source_f_sptr self, int which, int delay)
        declare_sample_delay(controlled_const_source_f_sptr self, unsigned int delay)
        """
        return _grgsm_swig.controlled_const_source_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(controlled_const_source_f_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.controlled_const_source_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(controlled_const_source_f_sptr self) -> int"""
        return _grgsm_swig.controlled_const_source_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(controlled_const_source_f_sptr self) -> double"""
        return _grgsm_swig.controlled_const_source_f_sptr_relative_rate(self)


    def start(self):
        """start(controlled_const_source_f_sptr self) -> bool"""
        return _grgsm_swig.controlled_const_source_f_sptr_start(self)


    def stop(self):
        """stop(controlled_const_source_f_sptr self) -> bool"""
        return _grgsm_swig.controlled_const_source_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(controlled_const_source_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.controlled_const_source_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(controlled_const_source_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.controlled_const_source_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(controlled_const_source_f_sptr self) -> int"""
        return _grgsm_swig.controlled_const_source_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(controlled_const_source_f_sptr self, int m)"""
        return _grgsm_swig.controlled_const_source_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(controlled_const_source_f_sptr self)"""
        return _grgsm_swig.controlled_const_source_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(controlled_const_source_f_sptr self) -> bool"""
        return _grgsm_swig.controlled_const_source_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(controlled_const_source_f_sptr self, int m)"""
        return _grgsm_swig.controlled_const_source_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(controlled_const_source_f_sptr self) -> int"""
        return _grgsm_swig.controlled_const_source_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(controlled_const_source_f_sptr self, int i) -> long"""
        return _grgsm_swig.controlled_const_source_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(controlled_const_source_f_sptr self, long max_output_buffer)
        set_max_output_buffer(controlled_const_source_f_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.controlled_const_source_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(controlled_const_source_f_sptr self, int i) -> long"""
        return _grgsm_swig.controlled_const_source_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(controlled_const_source_f_sptr self, long min_output_buffer)
        set_min_output_buffer(controlled_const_source_f_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.controlled_const_source_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(controlled_const_source_f_sptr self, int which) -> float
        pc_input_buffers_full(controlled_const_source_f_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_const_source_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(controlled_const_source_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(controlled_const_source_f_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_const_source_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(controlled_const_source_f_sptr self, int which) -> float
        pc_input_buffers_full_var(controlled_const_source_f_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_const_source_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(controlled_const_source_f_sptr self, int which) -> float
        pc_output_buffers_full(controlled_const_source_f_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_const_source_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(controlled_const_source_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(controlled_const_source_f_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_const_source_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(controlled_const_source_f_sptr self, int which) -> float
        pc_output_buffers_full_var(controlled_const_source_f_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.controlled_const_source_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(controlled_const_source_f_sptr self) -> float"""
        return _grgsm_swig.controlled_const_source_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(controlled_const_source_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.controlled_const_source_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(controlled_const_source_f_sptr self)"""
        return _grgsm_swig.controlled_const_source_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(controlled_const_source_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.controlled_const_source_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(controlled_const_source_f_sptr self) -> int"""
        return _grgsm_swig.controlled_const_source_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(controlled_const_source_f_sptr self) -> int"""
        return _grgsm_swig.controlled_const_source_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(controlled_const_source_f_sptr self, int priority) -> int"""
        return _grgsm_swig.controlled_const_source_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(controlled_const_source_f_sptr self) -> std::string"""
        return _grgsm_swig.controlled_const_source_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(controlled_const_source_f_sptr self) -> std::string"""
        return _grgsm_swig.controlled_const_source_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(controlled_const_source_f_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.controlled_const_source_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(controlled_const_source_f_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.controlled_const_source_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(controlled_const_source_f_sptr self) -> long"""
        return _grgsm_swig.controlled_const_source_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(controlled_const_source_f_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.controlled_const_source_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(controlled_const_source_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.controlled_const_source_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(controlled_const_source_f_sptr self) -> std::string"""
        return _grgsm_swig.controlled_const_source_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(controlled_const_source_f_sptr self, std::string name)"""
        return _grgsm_swig.controlled_const_source_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(controlled_const_source_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.controlled_const_source_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(controlled_const_source_f_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.controlled_const_source_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(controlled_const_source_f_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.controlled_const_source_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(controlled_const_source_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.controlled_const_source_f_sptr_message_subscribers(self, which_port)

controlled_const_source_f_sptr_swigregister = _grgsm_swig.controlled_const_source_f_sptr_swigregister
controlled_const_source_f_sptr_swigregister(controlled_const_source_f_sptr)


controlled_const_source_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
controlled_const_source_f = controlled_const_source_f.make;

class message_printer(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(prepend_string, prepend_fnr=False, prepend_frame_count=False, print_gsmtap_header=False):
        """
        make(swig_int_ptr prepend_string, bool prepend_fnr=False, bool prepend_frame_count=False, bool print_gsmtap_header=False) -> message_printer_sptr

        Return a shared_ptr to a new instance of gsm::message_printer.

        To avoid accidental use of raw pointers, gsm::message_printer's constructor is in a private implementation class. gsm::message_printer::make is the public interface for creating new instances.

        Params: (prepend_string, prepend_fnr, prepend_frame_count, print_gsmtap_header)
        """
        return _grgsm_swig.message_printer_make(prepend_string, prepend_fnr, prepend_frame_count, print_gsmtap_header)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_message_printer
    __del__ = lambda self: None
message_printer_swigregister = _grgsm_swig.message_printer_swigregister
message_printer_swigregister(message_printer)

def message_printer_make(prepend_string, prepend_fnr=False, prepend_frame_count=False, print_gsmtap_header=False):
    """
    message_printer_make(swig_int_ptr prepend_string, bool prepend_fnr=False, bool prepend_frame_count=False, bool print_gsmtap_header=False) -> message_printer_sptr

    Return a shared_ptr to a new instance of gsm::message_printer.

    To avoid accidental use of raw pointers, gsm::message_printer's constructor is in a private implementation class. gsm::message_printer::make is the public interface for creating new instances.

    Params: (prepend_string, prepend_fnr, prepend_frame_count, print_gsmtap_header)
    """
    return _grgsm_swig.message_printer_make(prepend_string, prepend_fnr, prepend_frame_count, print_gsmtap_header)

class message_printer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::message_printer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::message_printer)> self) -> message_printer_sptr
        __init__(boost::shared_ptr<(gr::gsm::message_printer)> self, message_printer p) -> message_printer_sptr
        """
        this = _grgsm_swig.new_message_printer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_printer_sptr self) -> message_printer"""
        return _grgsm_swig.message_printer_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_message_printer_sptr
    __del__ = lambda self: None

    def make(self, prepend_string, prepend_fnr=False, prepend_frame_count=False, print_gsmtap_header=False):
        """
        make(message_printer_sptr self, swig_int_ptr prepend_string, bool prepend_fnr=False, bool prepend_frame_count=False, bool print_gsmtap_header=False) -> message_printer_sptr

        Return a shared_ptr to a new instance of gsm::message_printer.

        To avoid accidental use of raw pointers, gsm::message_printer's constructor is in a private implementation class. gsm::message_printer::make is the public interface for creating new instances.

        Params: (prepend_string, prepend_fnr, prepend_frame_count, print_gsmtap_header)
        """
        return _grgsm_swig.message_printer_sptr_make(self, prepend_string, prepend_fnr, prepend_frame_count, print_gsmtap_header)


    def history(self):
        """history(message_printer_sptr self) -> unsigned int"""
        return _grgsm_swig.message_printer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_printer_sptr self, int which, int delay)
        declare_sample_delay(message_printer_sptr self, unsigned int delay)
        """
        return _grgsm_swig.message_printer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_printer_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.message_printer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_printer_sptr self) -> int"""
        return _grgsm_swig.message_printer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_printer_sptr self) -> double"""
        return _grgsm_swig.message_printer_sptr_relative_rate(self)


    def start(self):
        """start(message_printer_sptr self) -> bool"""
        return _grgsm_swig.message_printer_sptr_start(self)


    def stop(self):
        """stop(message_printer_sptr self) -> bool"""
        return _grgsm_swig.message_printer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_printer_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.message_printer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_printer_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.message_printer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_printer_sptr self) -> int"""
        return _grgsm_swig.message_printer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_printer_sptr self, int m)"""
        return _grgsm_swig.message_printer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_printer_sptr self)"""
        return _grgsm_swig.message_printer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_printer_sptr self) -> bool"""
        return _grgsm_swig.message_printer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_printer_sptr self, int m)"""
        return _grgsm_swig.message_printer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_printer_sptr self) -> int"""
        return _grgsm_swig.message_printer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_printer_sptr self, int i) -> long"""
        return _grgsm_swig.message_printer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_printer_sptr self, long max_output_buffer)
        set_max_output_buffer(message_printer_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.message_printer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_printer_sptr self, int i) -> long"""
        return _grgsm_swig.message_printer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_printer_sptr self, long min_output_buffer)
        set_min_output_buffer(message_printer_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.message_printer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_printer_sptr self, int which) -> float
        pc_input_buffers_full(message_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_printer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_printer_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_printer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_printer_sptr self, int which) -> float
        pc_input_buffers_full_var(message_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_printer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_printer_sptr self, int which) -> float
        pc_output_buffers_full(message_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_printer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_printer_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_printer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_printer_sptr self, int which) -> float
        pc_output_buffers_full_var(message_printer_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_printer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_printer_sptr self) -> float"""
        return _grgsm_swig.message_printer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_printer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.message_printer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_printer_sptr self)"""
        return _grgsm_swig.message_printer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_printer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.message_printer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_printer_sptr self) -> int"""
        return _grgsm_swig.message_printer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_printer_sptr self) -> int"""
        return _grgsm_swig.message_printer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_printer_sptr self, int priority) -> int"""
        return _grgsm_swig.message_printer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_printer_sptr self) -> std::string"""
        return _grgsm_swig.message_printer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_printer_sptr self) -> std::string"""
        return _grgsm_swig.message_printer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_printer_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_printer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_printer_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_printer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_printer_sptr self) -> long"""
        return _grgsm_swig.message_printer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_printer_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.message_printer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_printer_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.message_printer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_printer_sptr self) -> std::string"""
        return _grgsm_swig.message_printer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_printer_sptr self, std::string name)"""
        return _grgsm_swig.message_printer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_printer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.message_printer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_printer_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_printer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_printer_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_printer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_printer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.message_printer_sptr_message_subscribers(self, which_port)

message_printer_sptr_swigregister = _grgsm_swig.message_printer_sptr_swigregister
message_printer_sptr_swigregister(message_printer_sptr)


message_printer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_printer = message_printer.make;

class tmsi_dumper(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> tmsi_dumper_sptr

        Return a shared_ptr to a new instance of gsm::tmsi_dumper.

        To avoid accidental use of raw pointers, gsm::tmsi_dumper's constructor is in a private implementation class. gsm::tmsi_dumper::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.tmsi_dumper_make()

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_tmsi_dumper
    __del__ = lambda self: None
tmsi_dumper_swigregister = _grgsm_swig.tmsi_dumper_swigregister
tmsi_dumper_swigregister(tmsi_dumper)

def tmsi_dumper_make():
    """
    tmsi_dumper_make() -> tmsi_dumper_sptr

    Return a shared_ptr to a new instance of gsm::tmsi_dumper.

    To avoid accidental use of raw pointers, gsm::tmsi_dumper's constructor is in a private implementation class. gsm::tmsi_dumper::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.tmsi_dumper_make()

class tmsi_dumper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::tmsi_dumper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::tmsi_dumper)> self) -> tmsi_dumper_sptr
        __init__(boost::shared_ptr<(gr::gsm::tmsi_dumper)> self, tmsi_dumper p) -> tmsi_dumper_sptr
        """
        this = _grgsm_swig.new_tmsi_dumper_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tmsi_dumper_sptr self) -> tmsi_dumper"""
        return _grgsm_swig.tmsi_dumper_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_tmsi_dumper_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(tmsi_dumper_sptr self) -> tmsi_dumper_sptr

        Return a shared_ptr to a new instance of gsm::tmsi_dumper.

        To avoid accidental use of raw pointers, gsm::tmsi_dumper's constructor is in a private implementation class. gsm::tmsi_dumper::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.tmsi_dumper_sptr_make(self)


    def history(self):
        """history(tmsi_dumper_sptr self) -> unsigned int"""
        return _grgsm_swig.tmsi_dumper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tmsi_dumper_sptr self, int which, int delay)
        declare_sample_delay(tmsi_dumper_sptr self, unsigned int delay)
        """
        return _grgsm_swig.tmsi_dumper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tmsi_dumper_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.tmsi_dumper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tmsi_dumper_sptr self) -> int"""
        return _grgsm_swig.tmsi_dumper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tmsi_dumper_sptr self) -> double"""
        return _grgsm_swig.tmsi_dumper_sptr_relative_rate(self)


    def start(self):
        """start(tmsi_dumper_sptr self) -> bool"""
        return _grgsm_swig.tmsi_dumper_sptr_start(self)


    def stop(self):
        """stop(tmsi_dumper_sptr self) -> bool"""
        return _grgsm_swig.tmsi_dumper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tmsi_dumper_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.tmsi_dumper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tmsi_dumper_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.tmsi_dumper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tmsi_dumper_sptr self) -> int"""
        return _grgsm_swig.tmsi_dumper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tmsi_dumper_sptr self, int m)"""
        return _grgsm_swig.tmsi_dumper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tmsi_dumper_sptr self)"""
        return _grgsm_swig.tmsi_dumper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tmsi_dumper_sptr self) -> bool"""
        return _grgsm_swig.tmsi_dumper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tmsi_dumper_sptr self, int m)"""
        return _grgsm_swig.tmsi_dumper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tmsi_dumper_sptr self) -> int"""
        return _grgsm_swig.tmsi_dumper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tmsi_dumper_sptr self, int i) -> long"""
        return _grgsm_swig.tmsi_dumper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tmsi_dumper_sptr self, long max_output_buffer)
        set_max_output_buffer(tmsi_dumper_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.tmsi_dumper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tmsi_dumper_sptr self, int i) -> long"""
        return _grgsm_swig.tmsi_dumper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tmsi_dumper_sptr self, long min_output_buffer)
        set_min_output_buffer(tmsi_dumper_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.tmsi_dumper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tmsi_dumper_sptr self, int which) -> float
        pc_input_buffers_full(tmsi_dumper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tmsi_dumper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tmsi_dumper_sptr self, int which) -> float
        pc_input_buffers_full_avg(tmsi_dumper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tmsi_dumper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tmsi_dumper_sptr self, int which) -> float
        pc_input_buffers_full_var(tmsi_dumper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tmsi_dumper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tmsi_dumper_sptr self, int which) -> float
        pc_output_buffers_full(tmsi_dumper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tmsi_dumper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tmsi_dumper_sptr self, int which) -> float
        pc_output_buffers_full_avg(tmsi_dumper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tmsi_dumper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tmsi_dumper_sptr self, int which) -> float
        pc_output_buffers_full_var(tmsi_dumper_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.tmsi_dumper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tmsi_dumper_sptr self) -> float"""
        return _grgsm_swig.tmsi_dumper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tmsi_dumper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.tmsi_dumper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tmsi_dumper_sptr self)"""
        return _grgsm_swig.tmsi_dumper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tmsi_dumper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.tmsi_dumper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tmsi_dumper_sptr self) -> int"""
        return _grgsm_swig.tmsi_dumper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tmsi_dumper_sptr self) -> int"""
        return _grgsm_swig.tmsi_dumper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tmsi_dumper_sptr self, int priority) -> int"""
        return _grgsm_swig.tmsi_dumper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tmsi_dumper_sptr self) -> std::string"""
        return _grgsm_swig.tmsi_dumper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tmsi_dumper_sptr self) -> std::string"""
        return _grgsm_swig.tmsi_dumper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tmsi_dumper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.tmsi_dumper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tmsi_dumper_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.tmsi_dumper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tmsi_dumper_sptr self) -> long"""
        return _grgsm_swig.tmsi_dumper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tmsi_dumper_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.tmsi_dumper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tmsi_dumper_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.tmsi_dumper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tmsi_dumper_sptr self) -> std::string"""
        return _grgsm_swig.tmsi_dumper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tmsi_dumper_sptr self, std::string name)"""
        return _grgsm_swig.tmsi_dumper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tmsi_dumper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.tmsi_dumper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tmsi_dumper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.tmsi_dumper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tmsi_dumper_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.tmsi_dumper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tmsi_dumper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.tmsi_dumper_sptr_message_subscribers(self, which_port)

tmsi_dumper_sptr_swigregister = _grgsm_swig.tmsi_dumper_sptr_swigregister
tmsi_dumper_sptr_swigregister(tmsi_dumper_sptr)


tmsi_dumper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tmsi_dumper = tmsi_dumper.make;

class message_file_sink(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(filename):
        """
        make(std::string const & filename) -> message_file_sink_sptr

        Return a shared_ptr to a new instance of grgsm::message_file_sink.

        To avoid accidental use of raw pointers, grgsm::message_file_sink's constructor is in a private implementation class. grgsm::message_file_sink::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.message_file_sink_make(filename)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_message_file_sink
    __del__ = lambda self: None
message_file_sink_swigregister = _grgsm_swig.message_file_sink_swigregister
message_file_sink_swigregister(message_file_sink)

def message_file_sink_make(filename):
    """
    message_file_sink_make(std::string const & filename) -> message_file_sink_sptr

    Return a shared_ptr to a new instance of grgsm::message_file_sink.

    To avoid accidental use of raw pointers, grgsm::message_file_sink's constructor is in a private implementation class. grgsm::message_file_sink::make is the public interface for creating new instances.

    Params: (filename)
    """
    return _grgsm_swig.message_file_sink_make(filename)

class message_file_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::message_file_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::message_file_sink)> self) -> message_file_sink_sptr
        __init__(boost::shared_ptr<(gr::gsm::message_file_sink)> self, message_file_sink p) -> message_file_sink_sptr
        """
        this = _grgsm_swig.new_message_file_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_file_sink_sptr self) -> message_file_sink"""
        return _grgsm_swig.message_file_sink_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_message_file_sink_sptr
    __del__ = lambda self: None

    def make(self, filename):
        """
        make(message_file_sink_sptr self, std::string const & filename) -> message_file_sink_sptr

        Return a shared_ptr to a new instance of grgsm::message_file_sink.

        To avoid accidental use of raw pointers, grgsm::message_file_sink's constructor is in a private implementation class. grgsm::message_file_sink::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.message_file_sink_sptr_make(self, filename)


    def history(self):
        """history(message_file_sink_sptr self) -> unsigned int"""
        return _grgsm_swig.message_file_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_file_sink_sptr self, int which, int delay)
        declare_sample_delay(message_file_sink_sptr self, unsigned int delay)
        """
        return _grgsm_swig.message_file_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_file_sink_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.message_file_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_file_sink_sptr self) -> int"""
        return _grgsm_swig.message_file_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_file_sink_sptr self) -> double"""
        return _grgsm_swig.message_file_sink_sptr_relative_rate(self)


    def start(self):
        """start(message_file_sink_sptr self) -> bool"""
        return _grgsm_swig.message_file_sink_sptr_start(self)


    def stop(self):
        """stop(message_file_sink_sptr self) -> bool"""
        return _grgsm_swig.message_file_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_file_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.message_file_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_file_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.message_file_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_file_sink_sptr self) -> int"""
        return _grgsm_swig.message_file_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_file_sink_sptr self, int m)"""
        return _grgsm_swig.message_file_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_file_sink_sptr self)"""
        return _grgsm_swig.message_file_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_file_sink_sptr self) -> bool"""
        return _grgsm_swig.message_file_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_file_sink_sptr self, int m)"""
        return _grgsm_swig.message_file_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_file_sink_sptr self) -> int"""
        return _grgsm_swig.message_file_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_file_sink_sptr self, int i) -> long"""
        return _grgsm_swig.message_file_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_file_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(message_file_sink_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.message_file_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_file_sink_sptr self, int i) -> long"""
        return _grgsm_swig.message_file_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_file_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(message_file_sink_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.message_file_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_file_sink_sptr self, int which) -> float
        pc_input_buffers_full(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_file_sink_sptr self, int which) -> float
        pc_output_buffers_full(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_file_sink_sptr self) -> float"""
        return _grgsm_swig.message_file_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_file_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.message_file_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_file_sink_sptr self)"""
        return _grgsm_swig.message_file_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_file_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.message_file_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_file_sink_sptr self) -> int"""
        return _grgsm_swig.message_file_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_file_sink_sptr self) -> int"""
        return _grgsm_swig.message_file_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_file_sink_sptr self, int priority) -> int"""
        return _grgsm_swig.message_file_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_file_sink_sptr self) -> std::string"""
        return _grgsm_swig.message_file_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_file_sink_sptr self) -> std::string"""
        return _grgsm_swig.message_file_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_file_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_file_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_file_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_file_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_file_sink_sptr self) -> long"""
        return _grgsm_swig.message_file_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_file_sink_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.message_file_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_file_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.message_file_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_file_sink_sptr self) -> std::string"""
        return _grgsm_swig.message_file_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_file_sink_sptr self, std::string name)"""
        return _grgsm_swig.message_file_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_file_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.message_file_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_file_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_file_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_file_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_file_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_file_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.message_file_sink_sptr_message_subscribers(self, which_port)

message_file_sink_sptr_swigregister = _grgsm_swig.message_file_sink_sptr_swigregister
message_file_sink_sptr_swigregister(message_file_sink_sptr)


message_file_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_file_sink = message_file_sink.make;

class message_file_source(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(filename):
        """
        make(std::string const & filename) -> message_file_source_sptr

        Return a shared_ptr to a new instance of grgsm::message_file_source.

        To avoid accidental use of raw pointers, grgsm::message_file_source's constructor is in a private implementation class. grgsm::message_file_source::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.message_file_source_make(filename)

    make = staticmethod(make)
    __swig_destroy__ = _grgsm_swig.delete_message_file_source
    __del__ = lambda self: None
message_file_source_swigregister = _grgsm_swig.message_file_source_swigregister
message_file_source_swigregister(message_file_source)

def message_file_source_make(filename):
    """
    message_file_source_make(std::string const & filename) -> message_file_source_sptr

    Return a shared_ptr to a new instance of grgsm::message_file_source.

    To avoid accidental use of raw pointers, grgsm::message_file_source's constructor is in a private implementation class. grgsm::message_file_source::make is the public interface for creating new instances.

    Params: (filename)
    """
    return _grgsm_swig.message_file_source_make(filename)

class message_file_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::message_file_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::message_file_source)> self) -> message_file_source_sptr
        __init__(boost::shared_ptr<(gr::gsm::message_file_source)> self, message_file_source p) -> message_file_source_sptr
        """
        this = _grgsm_swig.new_message_file_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_file_source_sptr self) -> message_file_source"""
        return _grgsm_swig.message_file_source_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_message_file_source_sptr
    __del__ = lambda self: None

    def make(self, filename):
        """
        make(message_file_source_sptr self, std::string const & filename) -> message_file_source_sptr

        Return a shared_ptr to a new instance of grgsm::message_file_source.

        To avoid accidental use of raw pointers, grgsm::message_file_source's constructor is in a private implementation class. grgsm::message_file_source::make is the public interface for creating new instances.

        Params: (filename)
        """
        return _grgsm_swig.message_file_source_sptr_make(self, filename)


    def history(self):
        """history(message_file_source_sptr self) -> unsigned int"""
        return _grgsm_swig.message_file_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_file_source_sptr self, int which, int delay)
        declare_sample_delay(message_file_source_sptr self, unsigned int delay)
        """
        return _grgsm_swig.message_file_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_file_source_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.message_file_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_file_source_sptr self) -> int"""
        return _grgsm_swig.message_file_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_file_source_sptr self) -> double"""
        return _grgsm_swig.message_file_source_sptr_relative_rate(self)


    def start(self):
        """start(message_file_source_sptr self) -> bool"""
        return _grgsm_swig.message_file_source_sptr_start(self)


    def stop(self):
        """stop(message_file_source_sptr self) -> bool"""
        return _grgsm_swig.message_file_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_file_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.message_file_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_file_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.message_file_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_file_source_sptr self) -> int"""
        return _grgsm_swig.message_file_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_file_source_sptr self, int m)"""
        return _grgsm_swig.message_file_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_file_source_sptr self)"""
        return _grgsm_swig.message_file_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_file_source_sptr self) -> bool"""
        return _grgsm_swig.message_file_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_file_source_sptr self, int m)"""
        return _grgsm_swig.message_file_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_file_source_sptr self) -> int"""
        return _grgsm_swig.message_file_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_file_source_sptr self, int i) -> long"""
        return _grgsm_swig.message_file_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_file_source_sptr self, long max_output_buffer)
        set_max_output_buffer(message_file_source_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.message_file_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_file_source_sptr self, int i) -> long"""
        return _grgsm_swig.message_file_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_file_source_sptr self, long min_output_buffer)
        set_min_output_buffer(message_file_source_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.message_file_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_file_source_sptr self, int which) -> float
        pc_input_buffers_full(message_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_file_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_file_source_sptr self, int which) -> float
        pc_input_buffers_full_var(message_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_file_source_sptr self, int which) -> float
        pc_output_buffers_full(message_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_file_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_file_source_sptr self, int which) -> float
        pc_output_buffers_full_var(message_file_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_file_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_file_source_sptr self) -> float"""
        return _grgsm_swig.message_file_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_file_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.message_file_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_file_source_sptr self)"""
        return _grgsm_swig.message_file_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_file_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.message_file_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_file_source_sptr self) -> int"""
        return _grgsm_swig.message_file_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_file_source_sptr self) -> int"""
        return _grgsm_swig.message_file_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_file_source_sptr self, int priority) -> int"""
        return _grgsm_swig.message_file_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_file_source_sptr self) -> std::string"""
        return _grgsm_swig.message_file_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_file_source_sptr self) -> std::string"""
        return _grgsm_swig.message_file_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_file_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_file_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_file_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_file_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_file_source_sptr self) -> long"""
        return _grgsm_swig.message_file_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_file_source_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.message_file_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_file_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.message_file_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_file_source_sptr self) -> std::string"""
        return _grgsm_swig.message_file_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_file_source_sptr self, std::string name)"""
        return _grgsm_swig.message_file_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_file_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.message_file_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_file_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_file_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_file_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_file_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_file_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.message_file_source_sptr_message_subscribers(self, which_port)

message_file_source_sptr_swigregister = _grgsm_swig.message_file_source_sptr_swigregister
message_file_source_sptr_swigregister(message_file_source_sptr)


message_file_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_file_source = message_file_source.make;

class burst_sink(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """
        make() -> burst_sink_sptr

        Return a shared_ptr to a new instance of grgsm::burst_sink.

        To avoid accidental use of raw pointers, grgsm::burst_sink's constructor is in a private implementation class. grgsm::burst_sink::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_make()

    make = staticmethod(make)

    def get_framenumbers(self):
        """
        get_framenumbers(burst_sink self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_get_framenumbers(self)


    def get_timeslots(self):
        """
        get_timeslots(burst_sink self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_get_timeslots(self)


    def get_burst_data(self):
        """
        get_burst_data(burst_sink self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_get_burst_data(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_sink
    __del__ = lambda self: None
burst_sink_swigregister = _grgsm_swig.burst_sink_swigregister
burst_sink_swigregister(burst_sink)

def burst_sink_make():
    """
    burst_sink_make() -> burst_sink_sptr

    Return a shared_ptr to a new instance of grgsm::burst_sink.

    To avoid accidental use of raw pointers, grgsm::burst_sink's constructor is in a private implementation class. grgsm::burst_sink::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.burst_sink_make()

class burst_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_sink)> self) -> burst_sink_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_sink)> self, burst_sink p) -> burst_sink_sptr
        """
        this = _grgsm_swig.new_burst_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_sink_sptr self) -> burst_sink"""
        return _grgsm_swig.burst_sink_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_sink_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(burst_sink_sptr self) -> burst_sink_sptr

        Return a shared_ptr to a new instance of grgsm::burst_sink.

        To avoid accidental use of raw pointers, grgsm::burst_sink's constructor is in a private implementation class. grgsm::burst_sink::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_sptr_make(self)


    def get_framenumbers(self):
        """
        get_framenumbers(burst_sink_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_sptr_get_framenumbers(self)


    def get_timeslots(self):
        """
        get_timeslots(burst_sink_sptr self) -> std::vector< int,std::allocator< int > >



        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_sptr_get_timeslots(self)


    def get_burst_data(self):
        """
        get_burst_data(burst_sink_sptr self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.burst_sink_sptr_get_burst_data(self)


    def history(self):
        """history(burst_sink_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_sink_sptr self, int which, int delay)
        declare_sample_delay(burst_sink_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_sink_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_sink_sptr self) -> int"""
        return _grgsm_swig.burst_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_sink_sptr self) -> double"""
        return _grgsm_swig.burst_sink_sptr_relative_rate(self)


    def start(self):
        """start(burst_sink_sptr self) -> bool"""
        return _grgsm_swig.burst_sink_sptr_start(self)


    def stop(self):
        """stop(burst_sink_sptr self) -> bool"""
        return _grgsm_swig.burst_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_sink_sptr self) -> int"""
        return _grgsm_swig.burst_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_sink_sptr self, int m)"""
        return _grgsm_swig.burst_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_sink_sptr self)"""
        return _grgsm_swig.burst_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_sink_sptr self) -> bool"""
        return _grgsm_swig.burst_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_sink_sptr self, int m)"""
        return _grgsm_swig.burst_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_sink_sptr self) -> int"""
        return _grgsm_swig.burst_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_sink_sptr self, int i) -> long"""
        return _grgsm_swig.burst_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_sink_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_sink_sptr self, int i) -> long"""
        return _grgsm_swig.burst_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_sink_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_sink_sptr self, int which) -> float
        pc_input_buffers_full(burst_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_sink_sptr self, int which) -> float
        pc_output_buffers_full(burst_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_sink_sptr self) -> float"""
        return _grgsm_swig.burst_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_sink_sptr self)"""
        return _grgsm_swig.burst_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_sink_sptr self) -> int"""
        return _grgsm_swig.burst_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_sink_sptr self) -> int"""
        return _grgsm_swig.burst_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_sink_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_sink_sptr self) -> std::string"""
        return _grgsm_swig.burst_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_sink_sptr self) -> std::string"""
        return _grgsm_swig.burst_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_sink_sptr self) -> long"""
        return _grgsm_swig.burst_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_sink_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_sink_sptr self) -> std::string"""
        return _grgsm_swig.burst_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_sink_sptr self, std::string name)"""
        return _grgsm_swig.burst_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_sink_sptr_message_subscribers(self, which_port)

burst_sink_sptr_swigregister = _grgsm_swig.burst_sink_sptr_swigregister
burst_sink_sptr_swigregister(burst_sink_sptr)


burst_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_sink = burst_sink.make;

class burst_source(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(framenumbers, timeslots, burst_data):
        """
        make(std::vector< int,std::allocator< int > > const & framenumbers, std::vector< int,std::allocator< int > > const & timeslots, std::vector< std::string,std::allocator< std::string > > const & burst_data) -> burst_source_sptr

        Return a shared_ptr to a new instance of grgsm::burst_source.

        To avoid accidental use of raw pointers, grgsm::burst_source's constructor is in a private implementation class. grgsm::burst_source::make is the public interface for creating new instances.

        Params: (framenumbers, timeslots, burst_data)
        """
        return _grgsm_swig.burst_source_make(framenumbers, timeslots, burst_data)

    make = staticmethod(make)

    def set_framenumbers(self, framenumbers):
        """
        set_framenumbers(burst_source self, std::vector< int,std::allocator< int > > const & framenumbers)



        Params: (framenumbers)
        """
        return _grgsm_swig.burst_source_set_framenumbers(self, framenumbers)


    def set_timeslots(self, timeslots):
        """
        set_timeslots(burst_source self, std::vector< int,std::allocator< int > > const & timeslots)



        Params: (timeslots)
        """
        return _grgsm_swig.burst_source_set_timeslots(self, timeslots)


    def set_burst_data(self, burst_data):
        """
        set_burst_data(burst_source self, std::vector< std::string,std::allocator< std::string > > const & burst_data)



        Params: (burst_data)
        """
        return _grgsm_swig.burst_source_set_burst_data(self, burst_data)

    __swig_destroy__ = _grgsm_swig.delete_burst_source
    __del__ = lambda self: None
burst_source_swigregister = _grgsm_swig.burst_source_swigregister
burst_source_swigregister(burst_source)

def burst_source_make(framenumbers, timeslots, burst_data):
    """
    burst_source_make(std::vector< int,std::allocator< int > > const & framenumbers, std::vector< int,std::allocator< int > > const & timeslots, std::vector< std::string,std::allocator< std::string > > const & burst_data) -> burst_source_sptr

    Return a shared_ptr to a new instance of grgsm::burst_source.

    To avoid accidental use of raw pointers, grgsm::burst_source's constructor is in a private implementation class. grgsm::burst_source::make is the public interface for creating new instances.

    Params: (framenumbers, timeslots, burst_data)
    """
    return _grgsm_swig.burst_source_make(framenumbers, timeslots, burst_data)

class burst_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::burst_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::burst_source)> self) -> burst_source_sptr
        __init__(boost::shared_ptr<(gr::gsm::burst_source)> self, burst_source p) -> burst_source_sptr
        """
        this = _grgsm_swig.new_burst_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_source_sptr self) -> burst_source"""
        return _grgsm_swig.burst_source_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_burst_source_sptr
    __del__ = lambda self: None

    def make(self, framenumbers, timeslots, burst_data):
        """
        make(burst_source_sptr self, std::vector< int,std::allocator< int > > const & framenumbers, std::vector< int,std::allocator< int > > const & timeslots, std::vector< std::string,std::allocator< std::string > > const & burst_data) -> burst_source_sptr

        Return a shared_ptr to a new instance of grgsm::burst_source.

        To avoid accidental use of raw pointers, grgsm::burst_source's constructor is in a private implementation class. grgsm::burst_source::make is the public interface for creating new instances.

        Params: (framenumbers, timeslots, burst_data)
        """
        return _grgsm_swig.burst_source_sptr_make(self, framenumbers, timeslots, burst_data)


    def set_framenumbers(self, framenumbers):
        """
        set_framenumbers(burst_source_sptr self, std::vector< int,std::allocator< int > > const & framenumbers)



        Params: (framenumbers)
        """
        return _grgsm_swig.burst_source_sptr_set_framenumbers(self, framenumbers)


    def set_timeslots(self, timeslots):
        """
        set_timeslots(burst_source_sptr self, std::vector< int,std::allocator< int > > const & timeslots)



        Params: (timeslots)
        """
        return _grgsm_swig.burst_source_sptr_set_timeslots(self, timeslots)


    def set_burst_data(self, burst_data):
        """
        set_burst_data(burst_source_sptr self, std::vector< std::string,std::allocator< std::string > > const & burst_data)



        Params: (burst_data)
        """
        return _grgsm_swig.burst_source_sptr_set_burst_data(self, burst_data)


    def history(self):
        """history(burst_source_sptr self) -> unsigned int"""
        return _grgsm_swig.burst_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_source_sptr self, int which, int delay)
        declare_sample_delay(burst_source_sptr self, unsigned int delay)
        """
        return _grgsm_swig.burst_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_source_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.burst_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_source_sptr self) -> int"""
        return _grgsm_swig.burst_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_source_sptr self) -> double"""
        return _grgsm_swig.burst_source_sptr_relative_rate(self)


    def start(self):
        """start(burst_source_sptr self) -> bool"""
        return _grgsm_swig.burst_source_sptr_start(self)


    def stop(self):
        """stop(burst_source_sptr self) -> bool"""
        return _grgsm_swig.burst_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.burst_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.burst_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_source_sptr self) -> int"""
        return _grgsm_swig.burst_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_source_sptr self, int m)"""
        return _grgsm_swig.burst_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_source_sptr self)"""
        return _grgsm_swig.burst_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_source_sptr self) -> bool"""
        return _grgsm_swig.burst_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_source_sptr self, int m)"""
        return _grgsm_swig.burst_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_source_sptr self) -> int"""
        return _grgsm_swig.burst_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_source_sptr self, int i) -> long"""
        return _grgsm_swig.burst_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_source_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_source_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.burst_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_source_sptr self, int i) -> long"""
        return _grgsm_swig.burst_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_source_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_source_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.burst_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_source_sptr self, int which) -> float
        pc_input_buffers_full(burst_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_source_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_source_sptr self, int which) -> float
        pc_output_buffers_full(burst_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_source_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.burst_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_source_sptr self) -> float"""
        return _grgsm_swig.burst_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.burst_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_source_sptr self)"""
        return _grgsm_swig.burst_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.burst_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_source_sptr self) -> int"""
        return _grgsm_swig.burst_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_source_sptr self) -> int"""
        return _grgsm_swig.burst_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_source_sptr self, int priority) -> int"""
        return _grgsm_swig.burst_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_source_sptr self) -> std::string"""
        return _grgsm_swig.burst_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_source_sptr self) -> std::string"""
        return _grgsm_swig.burst_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.burst_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_source_sptr self) -> long"""
        return _grgsm_swig.burst_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_source_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.burst_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.burst_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_source_sptr self) -> std::string"""
        return _grgsm_swig.burst_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_source_sptr self, std::string name)"""
        return _grgsm_swig.burst_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.burst_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.burst_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.burst_source_sptr_message_subscribers(self, which_port)

burst_source_sptr_swigregister = _grgsm_swig.burst_source_sptr_swigregister
burst_source_sptr_swigregister(burst_source_sptr)


burst_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_source = burst_source.make;

class message_source(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(msg_data):
        """
        make(std::vector< std::string,std::allocator< std::string > > const & msg_data) -> message_source_sptr

        Return a shared_ptr to a new instance of grgsm::message_source.

        To avoid accidental use of raw pointers, grgsm::message_source's constructor is in a private implementation class. grgsm::message_source::make is the public interface for creating new instances.

        Params: (msg_data)
        """
        return _grgsm_swig.message_source_make(msg_data)

    make = staticmethod(make)

    def set_msg_data(self, msg_data):
        """
        set_msg_data(message_source self, std::vector< std::string,std::allocator< std::string > > const & msg_data)



        Params: (msg_data)
        """
        return _grgsm_swig.message_source_set_msg_data(self, msg_data)

    __swig_destroy__ = _grgsm_swig.delete_message_source
    __del__ = lambda self: None
message_source_swigregister = _grgsm_swig.message_source_swigregister
message_source_swigregister(message_source)

def message_source_make(msg_data):
    """
    message_source_make(std::vector< std::string,std::allocator< std::string > > const & msg_data) -> message_source_sptr

    Return a shared_ptr to a new instance of grgsm::message_source.

    To avoid accidental use of raw pointers, grgsm::message_source's constructor is in a private implementation class. grgsm::message_source::make is the public interface for creating new instances.

    Params: (msg_data)
    """
    return _grgsm_swig.message_source_make(msg_data)

class message_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::message_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::message_source)> self) -> message_source_sptr
        __init__(boost::shared_ptr<(gr::gsm::message_source)> self, message_source p) -> message_source_sptr
        """
        this = _grgsm_swig.new_message_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_source_sptr self) -> message_source"""
        return _grgsm_swig.message_source_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_message_source_sptr
    __del__ = lambda self: None

    def make(self, msg_data):
        """
        make(message_source_sptr self, std::vector< std::string,std::allocator< std::string > > const & msg_data) -> message_source_sptr

        Return a shared_ptr to a new instance of grgsm::message_source.

        To avoid accidental use of raw pointers, grgsm::message_source's constructor is in a private implementation class. grgsm::message_source::make is the public interface for creating new instances.

        Params: (msg_data)
        """
        return _grgsm_swig.message_source_sptr_make(self, msg_data)


    def set_msg_data(self, msg_data):
        """
        set_msg_data(message_source_sptr self, std::vector< std::string,std::allocator< std::string > > const & msg_data)



        Params: (msg_data)
        """
        return _grgsm_swig.message_source_sptr_set_msg_data(self, msg_data)


    def history(self):
        """history(message_source_sptr self) -> unsigned int"""
        return _grgsm_swig.message_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_source_sptr self, int which, int delay)
        declare_sample_delay(message_source_sptr self, unsigned int delay)
        """
        return _grgsm_swig.message_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_source_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.message_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_source_sptr self) -> int"""
        return _grgsm_swig.message_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_source_sptr self) -> double"""
        return _grgsm_swig.message_source_sptr_relative_rate(self)


    def start(self):
        """start(message_source_sptr self) -> bool"""
        return _grgsm_swig.message_source_sptr_start(self)


    def stop(self):
        """stop(message_source_sptr self) -> bool"""
        return _grgsm_swig.message_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.message_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.message_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_source_sptr self) -> int"""
        return _grgsm_swig.message_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_source_sptr self, int m)"""
        return _grgsm_swig.message_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_source_sptr self)"""
        return _grgsm_swig.message_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_source_sptr self) -> bool"""
        return _grgsm_swig.message_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_source_sptr self, int m)"""
        return _grgsm_swig.message_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_source_sptr self) -> int"""
        return _grgsm_swig.message_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_source_sptr self, int i) -> long"""
        return _grgsm_swig.message_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_source_sptr self, long max_output_buffer)
        set_max_output_buffer(message_source_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.message_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_source_sptr self, int i) -> long"""
        return _grgsm_swig.message_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_source_sptr self, long min_output_buffer)
        set_min_output_buffer(message_source_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.message_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_source_sptr self, int which) -> float
        pc_input_buffers_full(message_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_source_sptr self, int which) -> float
        pc_input_buffers_full_var(message_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_source_sptr self, int which) -> float
        pc_output_buffers_full(message_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_source_sptr self, int which) -> float
        pc_output_buffers_full_var(message_source_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_source_sptr self) -> float"""
        return _grgsm_swig.message_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.message_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_source_sptr self)"""
        return _grgsm_swig.message_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.message_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_source_sptr self) -> int"""
        return _grgsm_swig.message_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_source_sptr self) -> int"""
        return _grgsm_swig.message_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_source_sptr self, int priority) -> int"""
        return _grgsm_swig.message_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_source_sptr self) -> std::string"""
        return _grgsm_swig.message_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_source_sptr self) -> std::string"""
        return _grgsm_swig.message_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_source_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_source_sptr self) -> long"""
        return _grgsm_swig.message_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_source_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.message_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.message_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_source_sptr self) -> std::string"""
        return _grgsm_swig.message_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_source_sptr self, std::string name)"""
        return _grgsm_swig.message_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.message_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_source_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.message_source_sptr_message_subscribers(self, which_port)

message_source_sptr_swigregister = _grgsm_swig.message_source_sptr_swigregister
message_source_sptr_swigregister(message_source_sptr)


message_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_source = message_source.make;

class message_sink(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """
        make() -> message_sink_sptr

        Return a shared_ptr to a new instance of grgsm::message_sink.

        To avoid accidental use of raw pointers, grgsm::message_sink's constructor is in a private implementation class. grgsm::message_sink::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.message_sink_make()

    make = staticmethod(make)

    def get_messages(self):
        """
        get_messages(message_sink self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.message_sink_get_messages(self)

    __swig_destroy__ = _grgsm_swig.delete_message_sink
    __del__ = lambda self: None
message_sink_swigregister = _grgsm_swig.message_sink_swigregister
message_sink_swigregister(message_sink)

def message_sink_make():
    """
    message_sink_make() -> message_sink_sptr

    Return a shared_ptr to a new instance of grgsm::message_sink.

    To avoid accidental use of raw pointers, grgsm::message_sink's constructor is in a private implementation class. grgsm::message_sink::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _grgsm_swig.message_sink_make()

class message_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::gsm::message_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::gsm::message_sink)> self) -> message_sink_sptr
        __init__(boost::shared_ptr<(gr::gsm::message_sink)> self, message_sink p) -> message_sink_sptr
        """
        this = _grgsm_swig.new_message_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_sink_sptr self) -> message_sink"""
        return _grgsm_swig.message_sink_sptr___deref__(self)

    __swig_destroy__ = _grgsm_swig.delete_message_sink_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(message_sink_sptr self) -> message_sink_sptr

        Return a shared_ptr to a new instance of grgsm::message_sink.

        To avoid accidental use of raw pointers, grgsm::message_sink's constructor is in a private implementation class. grgsm::message_sink::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _grgsm_swig.message_sink_sptr_make(self)


    def get_messages(self):
        """
        get_messages(message_sink_sptr self) -> std::vector< std::string,std::allocator< std::string > >



        Params: (NONE)
        """
        return _grgsm_swig.message_sink_sptr_get_messages(self)


    def history(self):
        """history(message_sink_sptr self) -> unsigned int"""
        return _grgsm_swig.message_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_sink_sptr self, int which, int delay)
        declare_sample_delay(message_sink_sptr self, unsigned int delay)
        """
        return _grgsm_swig.message_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_sink_sptr self, int which) -> unsigned int"""
        return _grgsm_swig.message_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_sink_sptr self) -> int"""
        return _grgsm_swig.message_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_sink_sptr self) -> double"""
        return _grgsm_swig.message_sink_sptr_relative_rate(self)


    def start(self):
        """start(message_sink_sptr self) -> bool"""
        return _grgsm_swig.message_sink_sptr_start(self)


    def stop(self):
        """stop(message_sink_sptr self) -> bool"""
        return _grgsm_swig.message_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _grgsm_swig.message_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _grgsm_swig.message_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_sink_sptr self) -> int"""
        return _grgsm_swig.message_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_sink_sptr self, int m)"""
        return _grgsm_swig.message_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_sink_sptr self)"""
        return _grgsm_swig.message_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_sink_sptr self) -> bool"""
        return _grgsm_swig.message_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_sink_sptr self, int m)"""
        return _grgsm_swig.message_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_sink_sptr self) -> int"""
        return _grgsm_swig.message_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_sink_sptr self, int i) -> long"""
        return _grgsm_swig.message_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(message_sink_sptr self, int port, long max_output_buffer)
        """
        return _grgsm_swig.message_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_sink_sptr self, int i) -> long"""
        return _grgsm_swig.message_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(message_sink_sptr self, int port, long min_output_buffer)
        """
        return _grgsm_swig.message_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_sink_sptr self, int which) -> float
        pc_input_buffers_full(message_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(message_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_sink_sptr self, int which) -> float
        pc_output_buffers_full(message_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(message_sink_sptr self) -> pmt_vector_float
        """
        return _grgsm_swig.message_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_sink_sptr self) -> float"""
        return _grgsm_swig.message_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _grgsm_swig.message_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_sink_sptr self)"""
        return _grgsm_swig.message_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _grgsm_swig.message_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_sink_sptr self) -> int"""
        return _grgsm_swig.message_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_sink_sptr self) -> int"""
        return _grgsm_swig.message_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_sink_sptr self, int priority) -> int"""
        return _grgsm_swig.message_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_sink_sptr self) -> std::string"""
        return _grgsm_swig.message_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_sink_sptr self) -> std::string"""
        return _grgsm_swig.message_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_sink_sptr self) -> io_signature_sptr"""
        return _grgsm_swig.message_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_sink_sptr self) -> long"""
        return _grgsm_swig.message_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_sink_sptr self) -> basic_block_sptr"""
        return _grgsm_swig.message_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _grgsm_swig.message_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_sink_sptr self) -> std::string"""
        return _grgsm_swig.message_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_sink_sptr self, std::string name)"""
        return _grgsm_swig.message_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _grgsm_swig.message_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_sink_sptr self) -> swig_int_ptr"""
        return _grgsm_swig.message_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _grgsm_swig.message_sink_sptr_message_subscribers(self, which_port)

message_sink_sptr_swigregister = _grgsm_swig.message_sink_sptr_swigregister
message_sink_sptr_swigregister(message_sink_sptr)


message_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_sink = message_sink.make;



